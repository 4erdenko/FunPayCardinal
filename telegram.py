from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

import os
import telebot
from telebot import types
import logging
import traceback

from Utils import telegram_tools

from FunPayAPI.runner import MessageEvent


# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger("TGBot")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
mainKeyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
mainKeyboard.row("üìü –ö–æ–º–∞–Ω–¥—ã üìü")
mainKeyboard.row("ü§ñ –û –±–æ—Ç–µ ü§ñ")
mainKeyboard.row("üìã –õ–æ–≥–∏ üìã")

# –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥.
commands_text = """/add_chat - –¥–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
/remove_chat - —É–¥–∞–ª—è–µ—Ç —á–∞—Ç –∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
/menu - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é."""

# –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ.
about_text = """WSB FunPay - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:
    TG: @woopertail
    VK: https://vk.com/woopertail
    GitHub: https://github.com/woopertail

–°–∫–∞—á–∞—Ç—å –±–æ—Ç–∞:
https://github.com/woopertail/WSB_FunPay
"""


def create_cancel_reply_button():
    keyboard = telebot.types.InlineKeyboardMarkup()
    reply_button = telebot.types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_node_reply")
    keyboard.add(reply_button)
    return keyboard


class TGBot:
    def __init__(self, main_config):
        self.main_config = main_config
        self.bot = telebot.TeleBot(main_config["Telegram"]["token"])

        self.authorized_users = telegram_tools.load_authorized_users()
        self.chat_ids = telegram_tools.load_chat_ids()

        self.cardinal: Cardinal | None = None
        # {chat_id: {user_id: reply_type}
        self.user_reply_statuses: dict[int, dict[int, str]] = {}

    def init(self):
        self.__init_commands()
        logger.info("$MAGENTATelegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def __init_commands(self):
        bot_instance = self.bot

        @bot_instance.message_handler(func=lambda msg: msg.from_user.id not in self.authorized_users)
        def reg_admin(message: types.Message):
            try:
                if message.text == self.main_config["Telegram"]["secretKey"]:
                    if message.chat.type != "private":
                        return
                    if message.from_user.id not in self.authorized_users:
                        self.authorized_users.append(message.from_user.id)
                        telegram_tools.save_authorized_users(self.authorized_users)
                        text = f"""‚≠êÔ∏è –¢–∞-–¥–∞–∞–∞–∞–º! –¢–µ–ø–µ—Ä—å —è —Ç–µ–±–µ –¥–æ–≤–µ—Ä—è—é."""
                        self.bot.send_message(message.chat.id, text, reply_markup=mainKeyboard)

                elif message.from_user.id not in self.authorized_users:
                    if message.chat.type != "private":
                        return
                    text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!
    ü´§ –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    üîë –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≤–≤–µ–ª –≤ –º–æ–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üôÇ"""
                    self.bot.send_message(message.chat.id, text)
                return
            except:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ Telegram –±–æ—Ç–∞.")
                logger.debug(traceback.format_exc())

        @bot_instance.callback_query_handler(func=lambda call: True)
        def reply(call: types.CallbackQuery):
            try:
                data = call.data
                user_id = call.from_user.id
                chat_id = call.message.chat.id
                if data.startswith("reply_to_node_id"):
                    self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                          reply_markup=create_cancel_reply_button())
                    if chat_id not in self.user_reply_statuses:
                        self.user_reply_statuses[chat_id] = {}
                    self.user_reply_statuses[chat_id][user_id] = \
                        f"reply_to_node_id:{call.data.split(':')[1]}"
                    self.bot.answer_callback_query(call.id)

                elif data == "cancel_node_reply":
                    if chat_id in self.user_reply_statuses and user_id in self.user_reply_statuses[chat_id] and \
                            self.user_reply_statuses[chat_id][user_id].startswith("reply_to_node_id:"):
                        self.user_reply_statuses[chat_id].pop(user_id)
                        self.bot.send_message(chat_id, "–û–∫.")
                        self.bot.answer_callback_query(call.id)
                    else:
                        self.bot.send_message(chat_id, "–ê —Ç—ã –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫-—Ç–æ.")
                        self.bot.answer_callback_query(call.id)
            except:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ Telegram –±–æ—Ç–∞.")
                logger.debug(traceback.format_exc())

        @bot_instance.message_handler()
        def process_command(message: types.Message):
            try:
                chat_id = message.chat.id
                user_id = message.from_user.id
                if chat_id in self.user_reply_statuses and user_id in self.user_reply_statuses[chat_id] and \
                        self.user_reply_statuses[chat_id][user_id].startswith("reply_to_node_id:"):
                    if not self.cardinal:
                        self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞. –ö–∞—Ä–¥–∏–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–µ—Ä–Ω–∏ –º–µ–Ω—è –Ω–∞ –º–µ—Å—Ç–æ!")
                        self.user_reply_statuses[chat_id].pop(user_id)
                        return
                    node_id = int(self.user_reply_statuses[chat_id][user_id].split(":")[1])
                    new_msg_obj = MessageEvent(node_id, message.text, None, None, None)
                    try:
                        self.cardinal.send_message(new_msg_obj)
                        self.bot.send_message(chat_id, "–ü–æ–ª—É—á–∏–ª–æ—Å—å.")
                    except:
                        self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞.")
                        logger.debug(traceback.format_exc())
                    self.user_reply_statuses[chat_id].pop(user_id)

                if message.text == "/add_chat":
                    if message.chat.id in self.chat_ids:
                        self.bot.send_message(message.chat.id,
                                              "‚ùå –î–∞–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    else:
                        self.chat_ids.append(message.chat.id)
                        telegram_tools.save_chat_ids(self.chat_ids)
                        self.bot.send_message(message.chat.id,
                                              "‚úîÔ∏è –¢–µ–ø–µ—Ä—å –≤ —ç—Ç–æ—Ç —á–∞—Ç –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

                elif message.text == "/remove_chat":
                    if message.chat.id not in self.chat_ids:
                        self.bot.send_message(message.chat.id,
                                              "‚ùå –î–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    else:
                        self.chat_ids.remove(message.chat.id)
                        telegram_tools.save_chat_ids(self.chat_ids)
                        self.bot.send_message(message.chat.id,
                                              "‚úîÔ∏è –¢–µ–ø–µ—Ä—å –≤ —ç—Ç–æ—Ç —á–∞—Ç –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

                elif message.text == "/menu":
                    self.bot.send_message(message.chat.id, "–ú–µ–Ω—é", reply_markup=mainKeyboard)

                # –ö–æ–º–∞–Ω–¥—ã —Å –∫–Ω–æ–ø–æ–∫
                elif message.text == "üìü –ö–æ–º–∞–Ω–¥—ã üìü":
                    self.bot.send_message(message.chat.id, commands_text)

                elif message.text == "ü§ñ –û –±–æ—Ç–µ ü§ñ":
                    self.bot.send_message(message.chat.id, about_text)

                elif message.text == "üìã –õ–æ–≥–∏ üìã":
                    if not os.path.exists("logs/log.log"):
                        self.bot.send_message(message.chat.id, "‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
                    else:
                        with open("logs/log.log", "r", encoding="utf-8") as f:
                            self.bot.send_document(message.chat.id, f)
            except:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ Telegram –±–æ—Ç–∞.")
                logger.debug(traceback.format_exc())

    def send_notification(self, text: str, replaces: list[list[str]] | None = None, reply_button=None):
        escape_characters = "_*[]()~`>#+-=|{}.!"
        for char in escape_characters:
            text = text.replace(char, f"\\{char}")

        if replaces:
            for i in replaces:
                text = text.replace(i[0], i[1])

        for chat_id in self.chat_ids:
            try:
                if reply_button is None:
                    self.bot.send_message(chat_id, text, parse_mode='MarkdownV2')
                else:
                    self.bot.send_message(chat_id, text, parse_mode='MarkdownV2', reply_markup=reply_button)
            except:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.")
                logger.debug(traceback.format_exc())

    def run(self):
        try:
            logger.info(f"$CYANTelegram –±–æ—Ç $YELLOW@{self.bot.user.username} $CYAN–∑–∞–ø—É—â–µ–Ω.")
            self.bot.infinity_polling(logger_level=logging.DEBUG)
        except:
            logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram (–≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω?).")
            logger.debug(traceback.format_exc())
