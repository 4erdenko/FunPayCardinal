"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–∞.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal
    from telegram.bot import TGBot

from telegram import telegram_tools as tg_tools, keyboards
from telebot.types import InlineKeyboardButton as Button
from Utils import config_loader as cfg_loader
from Utils import cardinal_tools
import Utils.exceptions as excs
from telebot import types
import traceback
import logging
import os


logger = logging.getLogger("TGBot")


def check_file(tg: TGBot, msg: types.Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª. –ß–∏—Å—Ç–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ TG –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—à–∏–±–∫–∏.

    :param tg: —ç–∫–∑–µ–º–ø–ª—è—Ä TG –±–æ—Ç–∞.

    :param msg: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.

    :return: True, –µ—Å–ª–∏ –≤—Å–µ –æ–∫, False, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –ø—Ä–æ—à–µ–ª.
    """
    tg.clear_user_state(msg.chat.id, msg.from_user.id, True)
    if not msg.document:
        tg.bot.send_message(msg.chat.id, "‚ùå –§–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
        return False
    if not msg.document.mime_type == "text/plain":
        tg.bot.send_message(msg.chat.id, "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º.")
        return False
    if msg.document.file_size >= 20971520:
        tg.bot.send_message(msg.chat.id, "‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–ú–ë.")
        return False
    return True


def download_file(tg: TGBot, msg: types.Message, file_name: str = "temp_file.txt") -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É storage/cache/.

    :param tg: —ç–∫–∑–µ–º–ø–ª—è—Ä TG –±–æ—Ç–∞.

    :param msg: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.

    :param file_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    :return: True, –µ—Å–ª–∏ –≤—Å–µ –æ–∫, False, –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    tg.bot.send_message(msg.chat.id, "‚è¨ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    try:
        file_info = tg.bot.get_file(msg.document.file_id)
        file = tg.bot.download_file(file_info.file_path)
    except:
        tg.bot.send_message(msg.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                                         "<code>logs/log.log</code>.", parse_mode="HTML")
        logger.debug(traceback.format_exc())
        return False

    with open(f"storage/cache/{file_name}", "wb") as new_file:
        new_file.write(file)
    return True


def upload_products_file(cardinal: Cardinal, msg: types.Message):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param msg: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    tg = cardinal.telegram
    bot = tg.bot
    if not check_file(tg, msg):
        return
    if not download_file(tg, msg, "temp_products_file.txt"):
        return

    bot.send_message(msg.chat.id, "üîÅ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")
    try:
        with open("storage/cache/temp_products_file.txt", "r", encoding="utf-8") as f:
            text = f.read()
    except:
        bot.send_message(msg.chat.id,
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                         "<code>logs/log.log</code>.", parse_mode="HTML")
        logger.debug(traceback.format_exc())
        return

    try:
        products_count = cardinal_tools.get_products_count("storage/cache/temp_products_file.txt")
        file_name = msg.document.file_name
        with open(f"storage/products/{file_name}", "w", encoding="utf-8") as f:
            f.write(text)
    except:
        bot.send_message(msg.chat.id,
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                         "<code>logs/log.log</code>.", parse_mode="HTML")
        logger.debug(traceback.format_exc())
        return
    file_number = os.listdir("storage/products").index(file_name)
    keyboard = types.InlineKeyboardMarkup() \
        .add(Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"products_file:{file_number}:0"))
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{msg.from_user.username} (id: {msg.from_user.id})$RESET "
                f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ $YELLOWstorage/products/{file_name}$RESET.")
    bot.send_message(msg.chat.id,
                     f"‚úÖ –§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ <code>storage/products/{file_name}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. "
                     f"–¢–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ: <code>{products_count}.</code>",
                     parse_mode="HTML", reply_markup=keyboard)


def upload_auto_response_config(cardinal: Cardinal, msg: types.Message):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param msg: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    tg = cardinal.telegram
    bot = tg.bot
    if not check_file(tg, msg):
        return
    if not download_file(tg, msg, "temp_auto_response.cfg"):
        return

    bot.send_message(msg.chat.id, "üîÅ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")
    try:
        new_config = cfg_loader.load_auto_response_config("storage/cache/temp_auto_response.cfg")
        raw_new_config = cfg_loader.load_raw_auto_response_config("storage/cache/temp_auto_response.cfg")
    except excs.ConfigParseError as e:
        bot.send_message(msg.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏: "
                                      f"<code>{tg_tools.format_text(str(e))}</code>", parse_mode="HTML")
        return
    except UnicodeDecodeError:
        bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ <code>UTF-8</code>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ "
                                      "—Ñ–∞–π–ª–∞ = <code>UTF-8</code>, –∞ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫ = <code>LF</code>.",
                         parse_mode="HTML")
        return
    except:
        bot.send_message(msg.chat.id,
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                         "<code>logs/log.log</code>", parse_mode="HTML")
        logger.debug(traceback.format_exc())
        return

    cardinal.RAW_AR_CFG = raw_new_config
    cardinal.AR_CFG = new_config
    cardinal.save_config(cardinal.RAW_AR_CFG, "configs/auto_response.cfg")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{msg.from_user.username} (id: {msg.from_user.id})$RESET "
                f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞.")
    bot.send_message(msg.chat.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.")


def upload_auto_delivery_config(cardinal: Cardinal, msg: types.Message):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param msg: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    tg = cardinal.telegram
    bot = tg.bot
    if not check_file(tg, msg):
        return
    if not download_file(tg, msg, "temp_auto_delivery.cfg"):
        return

    bot.send_message(msg.chat.id, "üîÅ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")
    try:
        new_config = cfg_loader.load_auto_delivery_config("storage/cache/temp_auto_delivery.cfg")
    except excs.ConfigParseError as e:
        bot.send_message(msg.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏: "
                                      f"<code>{tg_tools.format_text(str(e))}</code>", parse_mode="HTML")
        return
    except UnicodeDecodeError:
        bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ <code>UTF-8</code>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ "
                                      "—Ñ–∞–π–ª–∞ = <code>UTF-8</code>, –∞ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫ = <code>LF</code>.",
                         parse_mode="HTML")
        return
    except:
        bot.send_message(msg.chat.id,
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                         "<code>logs/log.log</code>", parse_mode="HTML")
        logger.debug(traceback.format_exc())
        return

    cardinal.AD_CFG = new_config
    cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{msg.from_user.username} (id: {msg.from_user.id})$RESET "
                f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.")
    bot.send_message(msg.chat.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.")


def upload_main_config(cardinal: Cardinal, msg: types.Message):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param msg: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    tg = cardinal.telegram
    bot = tg.bot
    if not check_file(tg, msg):
        return
    if not download_file(tg, msg, "temp_main.cfg"):
        return

    bot.send_message(msg.chat.id, "üîÅ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")
    try:
        new_config = cfg_loader.load_main_config("storage/cache/temp_main.cfg")
    except excs.ConfigParseError as e:
        bot.send_message(msg.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏: "
                                      f"<code>{tg_tools.format_text(str(e))}</code>", parse_mode="HTML")
        return
    except UnicodeDecodeError:
        bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ <code>UTF-8</code>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ "
                                      "—Ñ–∞–π–ª–∞ = <code>UTF-8</code>, –∞ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫ = <code>LF</code>.",
                         parse_mode="HTML")
        return
    except:
        bot.send_message(msg.chat.id,
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                         "<code>logs/log.log</code>", parse_mode="HTML")
        logger.debug(traceback.format_exc())
        return

    cardinal.save_config(new_config, "configs/_main.cfg")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{msg.from_user.username} (id: {msg.from_user.id})$RESET "
                f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.")
    bot.send_message(msg.chat.id, "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. \n"
                                  "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞, —á—Ç–æ –±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. \n"
                                  "–õ—é–±–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞ –ü–£ –æ—Ç–º–µ–Ω–∏—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")


def init_uploader(cardinal: Cardinal):
    tg = cardinal.telegram
    bot = tg.bot

    def main(msg: types.Message):
        if tg.check_state(msg.chat.id, msg.from_user.id, "upload_products_file"):
            upload_products_file(cardinal, msg)
        elif tg.check_state(msg.chat.id, msg.from_user.id, "upload_auto_response_config"):
            upload_auto_response_config(cardinal, msg)
        elif tg.check_state(msg.chat.id, msg.from_user.id, "upload_auto_delivery_config"):
            upload_auto_delivery_config(cardinal, msg)
        elif tg.check_state(msg.chat.id, msg.from_user.id, "upload_main_config"):
            upload_main_config(cardinal, msg)

    def act_upload_products_file(call: types.CallbackQuery):
        result = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(call.message.chat.id, result.id, call.from_user.id, "upload_products_file")
        bot.answer_callback_query(call.id)

    def act_upload_main_config(call: types.CallbackQuery):
        result = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(call.message.chat.id, result.id, call.from_user.id, "upload_main_config")
        bot.answer_callback_query(call.id)

    def act_upload_auto_response_config(call: types.CallbackQuery):
        result = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(call.message.chat.id, result.id, call.from_user.id, "upload_auto_response_config")
        bot.answer_callback_query(call.id)

    def act_upload_auto_delivery_config(call: types.CallbackQuery):
        result = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(call.message.chat.id, result.id, call.from_user.id, "upload_auto_delivery_config")
        bot.answer_callback_query(call.id)

    tg.msg_handler(main, content_types=["document"])
    tg.cbq_handler(act_upload_products_file, func=lambda c: c.data == "upload_products_file")
    tg.cbq_handler(act_upload_auto_response_config, func=lambda c: c.data == "upload_auto_response_config")
    tg.cbq_handler(act_upload_auto_delivery_config, func=lambda c: c.data == "upload_auto_delivery_config")
    tg.cbq_handler(act_upload_main_config, func=lambda c: c.data == "upload_main_config")


REGISTER_TO_POST_INIT = [init_uploader]

