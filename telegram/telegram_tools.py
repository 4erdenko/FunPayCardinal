"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram –±–æ—Ç.
"""
import configparser
import json
import os.path


ABOUT_TEXT = """FunPay Cardinal - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:
    TG: @woopertail
    VK: https://vk.com/woopertail
    GitHub: https://github.com/woopertail

–°–∫–∞—á–∞—Ç—å –±–æ—Ç–∞:
https://github.com/woopertail/FunPayCardinal"""


def load_authorized_users() -> list[int]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞.

    :return: —Å–ø–∏—Å–æ–∫ –∏–∑ id –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not os.path.exists("storage/cache/tg_authorized_users.json"):
        return []
    with open("storage/cache/tg_authorized_users.json", "r", encoding="utf-8") as f:
        data = f.read()
    return json.loads(data)


def load_chat_ids() -> list[int]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞.

    :return: —Å–ø–∏—Å–æ–∫ –∏–∑ id —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    if not os.path.exists("storage/cache/tg_chat_ids.json"):
        return []
    with open("storage/cache/tg_chat_ids.json", "r", encoding="utf-8") as f:
        data = f.read()
    return json.loads(data)


def save_authorized_users(users: list[int]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç id –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à.

    :param users: —Å–ø–∏—Å–æ–∫ id –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :return:
    """
    if not os.path.exists("storage/cache/"):
        os.makedirs("storage/cache/")

    with open("storage/cache/tg_authorized_users.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(users))


def save_chat_ids(chat_ids: list[int]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç id —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫—ç—à.

    :param chat_ids: —Å–ø–∏—Å–æ–∫ id —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    :return:
    """
    if not os.path.exists("storage/cache/"):
        os.makedirs("storage/cache/")

    with open("storage/cache/tg_chat_ids.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(chat_ids))


def format_text(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ HTML.

    :param text: —Ç–µ–∫—Å—Ç.
    :return: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    escape_characters = {
        "<": "&lt;",
        ">": "&gt;",
        "&": "&amp;"
    }
    for char in escape_characters:
        text = text.replace(char, escape_characters[char])
    return text


def get_on_off_text(value: bool | int | str | None, on: str = "üü¢", off: str = "üî¥"):
    if value is not None and int(value):
        return on
    return off


def generate_help_text(commands_json: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏.

    :return: —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏.
    """
    text = ""
    for module in commands_json:
        if not len(commands_json[module]):
            continue

        text += f"\n{module}\n"
        for command in commands_json[module]:
            text += f"    /{command} - {commands_json[module][command]}\n"
    return text.strip()


def generate_lot_info_text(lot_name: str, lot_obj: configparser.SectionProxy) -> str:
    if lot_obj.get("productsFileName") is None:
        file_path = "<b><u>–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.</u></b>"
    else:
        file_path = f"<code>storage/products/{lot_obj.get('productsFileName')}</code>"

    message = f"""<b>[{format_text(lot_name)}]</b>

<b><i>–û—Ç–≤–µ—Ç:</i></b> <code>{format_text(lot_obj["response"])}</code>

<b><i>–§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏: </i></b>{file_path}

<b><i>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: </i></b> {"<b><u>–ù–µ—Ç.</u></b>" if lot_obj.get("disable") in [None, "0"]
                                       else "<b><u>–î–∞.</u></b>"}

<b><i>–ê–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ: </i></b> {"<b><u>–ù–µ—Ç.</u></b>" if lot_obj.get("disableAutoRestore") in [None, "0"]
                                               else "<b><u>–î–∞.</u></b>"}

<b><i>–ê–≤—Ç–æ-–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞: </i></b> {"<b><u>–ù–µ—Ç.</u></b>" if lot_obj.get("disableAutoDisable") in [None, "0"]
                                            else "<b><u>–î–∞.</u></b>"}"""
    return message
