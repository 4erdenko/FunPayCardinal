"""
–§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Å—É–±-–ø–∞–Ω–µ–ª–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

from telebot.types import InlineKeyboardButton as Button
from telebot import types

from telegram import telegram_tools as tg_tools

import logging
import random
import os


logger = logging.getLogger("TGBot")

CLEAR_STATE_BTN = types.InlineKeyboardMarkup().add(Button("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_state"))


def power_off(instance_id: int, state: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞.

    :param instance_id: ID –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    :param state: —Ç–µ–∫—É—â–µ–π —ç—Ç–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    if state == 0:
        keyboard.row(Button("‚úÖ –î–∞", callback_data=f"power_off:1:{instance_id}"),
                     Button("‚ùå –ù–µ—Ç", callback_data="cancel_power_off"))
    elif state == 1:
        keyboard.row(Button("‚ùå –ù–µ—Ç", callback_data="cancel_power_off"),
                     Button("‚úÖ –î–∞", callback_data=f"power_off:2:{instance_id}"))
    elif state == 2:
        max_buttons = 10
        yes_button_num = random.randint(1, max_buttons)
        yes_button = Button("‚úÖ –î–∞", callback_data=f"power_off:3:{instance_id}")
        no_button = Button("‚ùå –ù–µ—Ç", callback_data="cancel_power_off")
        buttons = [*[no_button]*(yes_button_num-1), yes_button, *[no_button]*(max_buttons-yes_button_num)]
        keyboard.add(*buttons, row_width=2)
    elif state == 3:
        max_buttons = 30
        yes_button_num = random.randint(1, max_buttons)
        yes_button = Button("‚úÖ –î–∞", callback_data=f"power_off:4:{instance_id}")
        no_button = Button("‚ùå –ù–µ—Ç", callback_data="cancel_power_off")
        buttons = [*[no_button] * (yes_button_num - 1), yes_button, *[no_button] * (max_buttons - yes_button_num)]
        keyboard.add(*buttons, row_width=5)
    elif state == 4:
        max_buttons = 40
        yes_button_num = random.randint(1, max_buttons)
        yes_button = Button("‚ùå –ù–µ—Ç", callback_data=f"power_off:5:{instance_id}")
        no_button = Button("‚úÖ –î–∞", callback_data="cancel_power_off")
        buttons = [*[yes_button] * (yes_button_num - 1), no_button, *[yes_button] * (max_buttons - yes_button_num)]
        keyboard.add(*buttons, row_width=7)
    elif state == 5:
        keyboard.add(Button("‚úÖ –î—ç", callback_data=f"power_off:6:{instance_id}"))
    return keyboard


def main_menu() -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∫–æ–º–∞–Ω–¥–∞ /menu).

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)\
        .row("ü§ñ –û –±–æ—Ç–µ ü§ñ", "üìü –ö–æ–º–∞–Ω–¥—ã üìü")\
        .row("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", "üìã –õ–æ–≥–∏ üìã")\
        .row("üìà –°–∏—Å—Ç–µ–º–∞ üìà")\
        .row("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑ", "üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ üîå")
    return keyboard


def settings_sections() -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–æ–æ–±—â–µ–Ω–∏–µ: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback: "main_settings_page").

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings:main"))\
        .add(Button("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="settings:telegram"))\
        .add(Button("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞", callback_data="settings:autoResponse"))\
        .add(Button("üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data="settings:autoDelivery"))\
        .add(Button("üö´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",  callback_data="settings:blockList"))\
        .add(Button("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞–º–∏", callback_data="config_loader"))
    return keyboard


def main_settings(cardinal: Cardinal) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π (settings:main).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .row(Button(f"–ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoRaise']) else 'üî¥'}",
                    callback_data="switch:FunPay:autoRaise"),
             Button(f"–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoResponse']) else 'üî¥'}",
                    callback_data="switch:FunPay:autoResponse"))\
        .row(Button(f"–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoDelivery']) else 'üî¥'}",
                    callback_data="switch:FunPay:autoDelivery"),
             Button(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–æ–≤ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoRestore']) else 'üî¥'}",
                    callback_data="switch:FunPay:autoRestore"))\
        .add(Button(f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–æ–≤ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoDisable']) else 'üî¥'}",
                    callback_data="switch:FunPay:autoDisable"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings_page"))
    return keyboard


def notifications_settings(cardinal: Cardinal) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (settings:telegram).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–Ω—è—Ç–∏–∏ –ª–æ—Ç–æ–≤ "
                    f"{'üîî' if int(cardinal.MAIN_CFG['Telegram']['lotsRaiseNotification']) else 'üîï'}",
                    callback_data="switch:Telegram:lotsRaiseNotification"))\
        .add(Button(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö "
                    f"{'üîî' if int(cardinal.MAIN_CFG['Telegram']['newMessageNotification']) else 'üîï'}",
                    callback_data="switch:Telegram:newMessageNotification"))\
        .add(Button(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö "
                    f"{'üîî' if int(cardinal.MAIN_CFG['Telegram']['newOrderNotification']) else 'üîï'}",
                    callback_data="switch:Telegram:newOrderNotification"))\
        .add(Button(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ "
                    f"{'üîî' if int(cardinal.MAIN_CFG['Telegram']['productsDeliveryNotification']) else 'üîï'}",
                    callback_data="switch:Telegram:productsDeliveryNotification"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings_page"))
    return keyboard


def ar_settings() -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞ (settings:autoResponse).

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="command_list:0"))\
        .add(Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É / —Å–µ—Ç –∫–æ–º–∞–Ω–¥", callback_data="add_command"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings_page"))
    return keyboard


def ad_settings() -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ (settings:autoDelivery).

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .add(Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã", callback_data="lots:0")) \
        .add(Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç", callback_data="add_lot"))\
        .add(Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="products_files:0"))\
        .add(Button("‚§¥Ô∏è –í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="upload_products_file"))\
        .add(Button("‚ûï –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="create_products_file"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings_page"))
    return keyboard


def block_list_settings(cardinal: Cardinal) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (settings:blockList).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockDelivery']) else 'üî¥'}",
                    callback_data="switch:BlockList:blockDelivery"))\
        .add(Button(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockResponse']) else 'üî¥'}",
                    callback_data="switch:BlockList:blockResponse"))\
        .add(Button(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockNewMessageNotification']) else 'üî¥'}",
                    callback_data="switch:BlockList:blockNewMessageNotification"))\
        .add(Button(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockNewOrderNotification']) else 'üî¥'}",
                    callback_data="switch:BlockList:blockNewOrderNotification"))\
        .add(Button(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockCommandNotification']) else 'üî¥'}",
                    callback_data="switch:BlockList:blockCommandNotification"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings_page"))
    return keyboard


def commands_list(cardinal: Cardinal, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ (command_list:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    commands = cardinal.RAW_AR_CFG.sections()[offset: offset + 5]
    if not commands and offset != 0:
        offset = 0
        commands = cardinal.RAW_AR_CFG.sections()[offset: offset + 5]

    btn_number = 0
    for i in commands:
        #  edit_command:–Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:–æ—Ñ—Ñ—Å–µ—Ç (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)
        keyboard.add(Button(i, callback_data=f"edit_command:{offset + btn_number}:{offset}"))
        btn_number += 1

    navigation_buttons = []
    if offset > 0:
        back_offset = offset-5 if offset > 5 else 0
        back_button = Button("‚óÄÔ∏è –ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"command_list:{back_offset}")
        navigation_buttons.append(back_button)
    if offset + len(commands) < len(cardinal.RAW_AR_CFG.sections()):
        forward_offset = offset + len(commands)
        forward_button = Button("–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è", callback_data=f"command_list:{forward_offset}")
        navigation_buttons.append(forward_button)

    keyboard.add(Button("ü§ñ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞", callback_data="settings:autoResponse"))\
        .add(Button("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_settings_page"))\
        .row(*navigation_buttons)
    return keyboard


def edit_command(cardinal: Cardinal, command_number: int, offset: int) -> types.InlineKeyboardMarkup | None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã (edit_command:<command_num>:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param command_number: –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã.
    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    if command_number > len(cardinal.RAW_AR_CFG.sections())-1:
        return None

    command = cardinal.RAW_AR_CFG.sections()[command_number]
    command_obj = cardinal.RAW_AR_CFG[command]
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"edit_commands_response:{command_number}"))\
        .add(Button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data=f"edit_commands_notification:{command_number}"))\
        .add(Button(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram "
                    f"{tg_tools.get_on_off_text(command_obj.get('telegramNotification'), on='üîî', off='üîï')}",
                    callback_data=f"switch_telegram_notification:{command_number}:{offset}"))\
        .add(Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É / —Å–µ—Ç –∫–æ–º–∞–Ω–¥", callback_data=f"del_command:{command_number}:{offset}"))\
        .add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"edit_command:{command_number}:{offset}"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"command_list:{offset}"))
    return keyboard


def products_file_list(offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (products_files:<offset>).

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    files = os.listdir("storage/products")[offset:offset + 5]
    if not files and offset != 0:
        offset = 0
        files = os.listdir("storage/products")[offset:offset + 5]

    for i in files:
        keyboard.add(Button(i, callback_data=f"products_file:{i}:{offset}"))

    navigation_buttons = []
    if offset > 0:
        back_offset = offset-5 if offset > 5 else 0
        back_button = Button("‚óÄÔ∏è –ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"products_files:{back_offset}")
        navigation_buttons.append(back_button)
    if offset + len(files) < len(os.listdir("storage/products")):
        forward_offset = offset + len(files)
        forward_button = Button("–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è", callback_data=f"products_files:{forward_offset}")
        navigation_buttons.append(forward_button)

    keyboard.add(Button("üì¶ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data="settings:autoDelivery"))\
        .add(Button("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_settings_page"))\
        .row(*navigation_buttons)
    return keyboard


def products_file_edit(file_name: str, offset: int, confirmation: bool = False) \
        -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (products_file:<file_name>:<offset>).

    :param file_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
    :param confirmation: –≤–∫–ª—é—á–∏—Ç—å –ª–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.", callback_data=f"add_products_to_file:{file_name}"))\
        .add(Button("‚§µÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.", callback_data=f"download_products_file:{file_name}"))
    if not confirmation:
        keyboard.add(Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data=f"del_products_file:{file_name}:{offset}"))
    else:
        keyboard.row(Button("‚úÖ –î–∞", callback_data=f"confirm_del_products_file:{file_name}:{offset}"),
                     Button("‚ùå –ù–µ—Ç", callback_data=f"products_file:{file_name}:{offset}"))
    keyboard.add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"products_file:{file_name}:{offset}"))\
            .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"products_files:{offset}"))
    return keyboard


def lots_list(cardinal: Cardinal, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ—Ç–æ–≤ (lots:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    lots = cardinal.AD_CFG.sections()[offset: offset + 5]
    if not lots and offset != 0:
        offset = 0
        lots = cardinal.AD_CFG.sections()[offset: offset + 5]

    btn_number = 0
    for i in lots:
        keyboard.add(Button(i, callback_data=f"edit_lot:{offset + btn_number}:{offset}"))
        btn_number += 1

    navigation_buttons = []
    if offset > 0:
        back_offset = offset - 5 if offset > 5 else 0
        back_button = Button("‚óÄÔ∏è –ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"lots:{back_offset}")
        navigation_buttons.append(back_button)
    if offset + len(lots) < len(cardinal.AD_CFG.sections()):
        forward_offset = offset + len(lots)
        forward_button = Button("–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è", callback_data=f"lots:{forward_offset}")
        navigation_buttons.append(forward_button)

    keyboard.add(Button("üì¶ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data="settings:autoDelivery")) \
        .add(Button("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_settings_page")) \
        .row(*navigation_buttons)
    return keyboard


def edit_lot(cardinal: Cardinal, lot_number: int, offset: int) -> types.InlineKeyboardMarkup | None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ—Ç–∞ (edit_lot:<lot_num>:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param lot_number: –Ω–æ–º–µ—Ä –ª–æ—Ç–∞.
    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    if lot_number > len(cardinal.AD_CFG.sections()) - 1:
        return None

    lot = cardinal.AD_CFG.sections()[lot_number]
    lot_obj = cardinal.AD_CFG[lot]
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏", callback_data=f"edit_lot_response:{lot_number}"))\
        .add(Button("‚õìÔ∏è –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data=f"link_products_file:{lot_number}"))\
        .add(Button("–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É" if lot_obj.get("disable") in [None, "0"] else "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É",
                    callback_data=f"switch_lot:disable:{lot_number}:{offset}"))\
        .add(Button("–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" if lot_obj.get("disableAutoRestore") in [None, "0"] else
                    "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
                    callback_data=f"switch_lot:disableAutoRestore:{lot_number}:{offset}"))\
        .add(Button("–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é" if lot_obj.get("disableAutoDisable") in [None, "0"] else
                    "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é",
                    callback_data=f"switch_lot:disableAutoDisable:{lot_number}:{offset}"))\
        .add(Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç", callback_data=f"del_lot:{lot_number}:{offset}"))\
        .add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"edit_lot:{lot_number}:{offset}"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"lots:{offset}"))
    return keyboard


def configs() -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–≥—Ä—É–∑–∫–∏ / –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .add(Button("‚§µÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥", callback_data="download_config:main")) \
        .add(Button("‚§µÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞", callback_data="download_config:auto_response")) \
        .add(Button("‚§µÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data="download_config:auto_delivery")) \
        .add(Button("‚§¥Ô∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥", callback_data="upload_main_config")) \
        .add(Button("‚§¥Ô∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞", callback_data="upload_auto_response_config")) \
        .add(Button("‚§¥Ô∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data="upload_auto_delivery_config")) \
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings_page"))
    return keyboard

