"""
–§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Å—É–±-–ø–∞–Ω–µ–ª–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

from telebot.types import InlineKeyboardButton as Button
from telebot import types

from tg_bot import utils, CBT, MENU_CFG

import logging
import random
import os


logger = logging.getLogger("TGBot")

CLEAR_STATE_BTN = types.InlineKeyboardMarkup().add(Button("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CBT.CLEAR_USER_STATE))

UPDATE_PROFILE_BTN = types.InlineKeyboardMarkup().add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=CBT.UPDATE_PROFILE))


def power_off(instance_id: int, state: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞.

    :param instance_id: ID –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    :param state: —Ç–µ–∫—É—â–µ–π —ç—Ç–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    if state == 0:
        keyboard.row(Button("‚úÖ –î–∞", callback_data=f"{CBT.SHUT_DOWN}:1:{instance_id}"),
                     Button("‚ùå –ù–µ—Ç", callback_data=CBT.CANCEL_SHUTTING_DOWN))
    elif state == 1:
        keyboard.row(Button("‚ùå –ù–µ—Ç", callback_data=CBT.CANCEL_SHUTTING_DOWN),
                     Button("‚úÖ –î–∞", callback_data=f"{CBT.SHUT_DOWN}:2:{instance_id}"))
    elif state == 2:
        max_buttons = 10
        yes_button_num = random.randint(1, max_buttons)
        yes_button = Button("‚úÖ –î–∞", callback_data=f"{CBT.SHUT_DOWN}:3:{instance_id}")
        no_button = Button("‚ùå –ù–µ—Ç", callback_data=CBT.CANCEL_SHUTTING_DOWN)
        buttons = [*[no_button]*(yes_button_num-1), yes_button, *[no_button]*(max_buttons-yes_button_num)]
        keyboard.add(*buttons, row_width=2)
    elif state == 3:
        max_buttons = 30
        yes_button_num = random.randint(1, max_buttons)
        yes_button = Button("‚úÖ –î–∞", callback_data=f"{CBT.SHUT_DOWN}:4:{instance_id}")
        no_button = Button("‚ùå –ù–µ—Ç", callback_data=CBT.CANCEL_SHUTTING_DOWN)
        buttons = [*[no_button] * (yes_button_num - 1), yes_button, *[no_button] * (max_buttons - yes_button_num)]
        keyboard.add(*buttons, row_width=5)
    elif state == 4:
        max_buttons = 40
        yes_button_num = random.randint(1, max_buttons)
        yes_button = Button("‚ùå –ù–µ—Ç", callback_data=f"{CBT.SHUT_DOWN}:5:{instance_id}")
        no_button = Button("‚úÖ –î–∞", callback_data=CBT.CANCEL_SHUTTING_DOWN)
        buttons = [*[yes_button] * (yes_button_num - 1), no_button, *[yes_button] * (max_buttons - yes_button_num)]
        keyboard.add(*buttons, row_width=7)
    elif state == 5:
        keyboard.add(Button("‚úÖ –î—ç", callback_data=f"{CBT.SHUT_DOWN}:6:{instance_id}"))
    return keyboard


def settings_sections() -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (CBT.MAIN).

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{CBT.CATEGORY}:main"))\
        .add(Button("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data=f"{CBT.CATEGORY}:telegram"))\
        .add(Button("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞", callback_data=f"{CBT.CATEGORY}:autoResponse"))\
        .add(Button("üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data=f"{CBT.CATEGORY}:autoDelivery"))\
        .add(Button("üö´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",  callback_data=f"{CBT.CATEGORY}:blockList"))\
        .add(Button("üìù –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤", callback_data=f"{CBT.TMPLT_LIST}:0"))\
        .add(Button("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞–º–∏", callback_data="config_loader"))
    return keyboard


def main_settings(cardinal: Cardinal) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π (CBT.CATEGORY:main).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .row(Button(f"–ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoRaise']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:FunPay:autoRaise"),
             Button(f"–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoResponse']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:FunPay:autoResponse"))\
        .row(Button(f"–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoDelivery']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:FunPay:autoDelivery"),
             Button(f"–ú—É–ª—å—Ç–∏-–≤—ã–¥–∞—á–∞ {utils.bool_to_text(cardinal.MAIN_CFG['FunPay'].getboolean('multiDelivery'))}",
                    callback_data=f"{CBT.SWITCH}:FunPay:multiDelivery"))\
        .row(Button(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–æ–≤ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoRestore']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:FunPay:autoRestore"),
             Button(f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–æ–≤ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoDisable']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:FunPay:autoDisable"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


def notifications_settings(cardinal: Cardinal, chat_id: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (CBT.CATEGORY:telegram).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–∑–≤–∞–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    tg = cardinal.telegram
    keyboard = types.InlineKeyboardMarkup()\
        .row(Button(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                    f"{'üîî' if tg.is_notification_enabled(chat_id, utils.NotificationTypes.new_message) else 'üîï'}",
                    callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{utils.NotificationTypes.new_message}"),
             Button(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "
                    f"{'üîî' if tg.is_notification_enabled(chat_id, utils.NotificationTypes.command) else 'üîï'}",
                    callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{utils.NotificationTypes.command}"))\
        .row(Button(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ "
                    f"{'üîî' if tg.is_notification_enabled(chat_id, utils.NotificationTypes.new_order) else 'üîï'}",
                    callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{utils.NotificationTypes.new_order}"),
             Button(f"–í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ "
                    f"{'üîî' if tg.is_notification_enabled(chat_id, utils.NotificationTypes.delivery) else 'üîï'}",
                    callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{utils.NotificationTypes.delivery}"))\
        .add(Button(f"–ü–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤ "
                    f"{'üîî' if tg.is_notification_enabled(chat_id, utils.NotificationTypes.lots_raise) else 'üîï'}",
                    callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{utils.NotificationTypes.lots_raise}"))\
        .add(Button(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ "
                    f"{'üîî' if tg.is_notification_enabled(chat_id, utils.NotificationTypes.bot_start) else 'üîï'}",
                    callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{utils.NotificationTypes.bot_start}"))\
        .add(Button(f"–ü—Ä–æ—á–µ–µ (–ø–ª–∞–≥–∏–Ω—ã) "
                    f"{'üîî' if tg.is_notification_enabled(chat_id, utils.NotificationTypes.other) else 'üîï'}",
                    callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{utils.NotificationTypes.other}")) \
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


def ar_settings() -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞ (CBT.CATEGORY:autoResponse).

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã", callback_data=f"{CBT.CMD_LIST}:0"))\
        .add(Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É / —Å–µ—Ç –∫–æ–º–∞–Ω–¥", callback_data=CBT.ADD_CMD))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


def ad_settings() -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ (CBT.CATEGORY:autoDelivery).

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .add(Button("üó≥Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É –ª–æ—Ç–æ–≤", callback_data=f"{CBT.AD_LOTS_LIST}:0")) \
        .add(Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É –ª–æ—Ç—É", callback_data=f"{CBT.FP_LOTS_LIST}:0"))\
        .add(Button("üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã", callback_data=f"{CBT.PRODUCTS_FILES_LIST}:0"))\
        .row(Button("‚§¥Ô∏è –í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–π —Ñ–∞–π–ª", callback_data=CBT.UPLOAD_PRODUCTS_FILE),
             Button("‚ûï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä–Ω—ã–π —Ñ–∞–π–ª", callback_data=CBT.CREATE_PRODUCTS_FILE))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


def block_list_settings(cardinal: Cardinal) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (CBT.CATEGORY:blockList).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockDelivery']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:BlockList:blockDelivery"))\
        .add(Button(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockResponse']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:BlockList:blockResponse"))\
        .add(Button(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockNewMessageNotification']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:BlockList:blockNewMessageNotification"))\
        .add(Button(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockNewOrderNotification']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:BlockList:blockNewOrderNotification"))\
        .add(Button(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö "
                    f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockCommandNotification']) else 'üî¥'}",
                    callback_data=f"{CBT.SWITCH}:BlockList:blockCommandNotification"))\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


def commands_list(cardinal: Cardinal, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ (CBT.CMD_LIST:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    commands = cardinal.RAW_AR_CFG.sections()[offset: offset + MENU_CFG.AR_BTNS_COUNT]
    if not commands and offset != 0:
        offset = 0
        commands = cardinal.RAW_AR_CFG.sections()[offset: offset + MENU_CFG.AR_BTNS_COUNT]

    for index, cmd in enumerate(commands):
        #  CBT.EDIT_CMD:–Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:–æ—Ñ—Ñ—Å–µ—Ç (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)
        keyboard.add(Button(cmd, callback_data=f"{CBT.EDIT_CMD}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.AR_BTNS_COUNT, len(commands),
                                            len(cardinal.RAW_AR_CFG.sections()), CBT.CMD_LIST)

    keyboard.add(Button("ü§ñ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫–∞", callback_data=f"{CBT.CATEGORY}:autoResponse"))\
        .add(Button("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def edit_command(cardinal: Cardinal, command_index: int, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã (CBT.EDIT_CMD:<command_num>:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param command_index: –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã.

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    command = cardinal.RAW_AR_CFG.sections()[command_index]
    command_obj = cardinal.RAW_AR_CFG[command]
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
                    callback_data=f"{CBT.EDIT_CMD_RESPONSE_TEXT}:{command_index}:{offset}"))\
        .add(Button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                    callback_data=f"{CBT.EDIT_CMD_NOTIFICATION_TEXT}:{command_index}:{offset}"))\
        .add(Button(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram "
                    f"{utils.bool_to_text(command_obj.get('telegramNotification'), on='üîî', off='üîï')}",
                    callback_data=f"{CBT.SWITCH_CMD_NOTIFICATION}:{command_index}:{offset}"))\
        .add(Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É / —Å–µ—Ç –∫–æ–º–∞–Ω–¥", callback_data=f"{CBT.DEL_CMD}:{command_index}:{offset}"))\
        .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.CMD_LIST}:{offset}"),
             Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{CBT.EDIT_CMD}:{command_index}:{offset}"))
    return keyboard


def products_files_list(offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (CBT.PRODUCTS_FILES_LIST:<offset>).

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    files = os.listdir("storage/products")[offset:offset + MENU_CFG.PF_BTNS_COUNT]
    if not files and offset != 0:
        offset = 0
        files = os.listdir("storage/products")[offset:offset + 5]

    for index, name in enumerate(files):
        keyboard.add(Button(name, callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.PF_BTNS_COUNT, len(files),
                                            len(os.listdir("storage/products")), CBT.PRODUCTS_FILES_LIST)

    keyboard.add(Button("üì¶ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data=f"{CBT.CATEGORY}:autoDelivery"))\
        .add(Button("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def products_file_edit(file_number: int, offset: int, confirmation: bool = False) \
        -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (CBT.EDIT_PRODUCTS_FILE:<file_index>:<offset>).

    :param file_number: –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.

    :param confirmation: –≤–∫–ª—é—á–∏—Ç—å –ª–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã",
                    callback_data=f"{CBT.ADD_PRODUCTS_TO_FILE}:{file_number}:{file_number}:{offset}:0"))\
        .add(Button("‚§µÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.", callback_data=f"download_products_file:{file_number}:{offset}"))
    if not confirmation:
        keyboard.add(Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data=f"del_products_file:{file_number}:{offset}"))
    else:
        keyboard.row(Button("‚úÖ –î–∞", callback_data=f"confirm_del_products_file:{file_number}:{offset}"),
                     Button("‚ùå –ù–µ—Ç", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_number}:{offset}"))
    keyboard.row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PRODUCTS_FILES_LIST}:{offset}"),
                 Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_number}:{offset}"))
    return keyboard


def lots_list(cardinal: Cardinal, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ—Ç–æ–≤ (lots:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    lots = cardinal.AD_CFG.sections()[offset: offset + MENU_CFG.AD_BTNS_COUNT]
    if not lots and offset != 0:
        offset = 0
        lots = cardinal.AD_CFG.sections()[offset: offset + MENU_CFG.AD_BTNS_COUNT]

    for index, lot in enumerate(lots):
        keyboard.add(Button(lot, callback_data=f"{CBT.EDIT_AD_LOT}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.AD_BTNS_COUNT, len(lots),
                                            len(cardinal.AD_CFG.sections()), CBT.AD_LOTS_LIST)

    keyboard.add(Button("üì¶ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data=f"{CBT.CATEGORY}:autoDelivery")) \
        .add(Button("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def funpay_lots_list(cardinal: Cardinal, offset: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ—Ç–æ–≤ —Å FunPay (funpay_lots:<offset>).
    """
    keyboard = types.InlineKeyboardMarkup()
    lots = cardinal.telegram_lots[offset: offset + MENU_CFG.FP_LOTS_BTNS_COUNT]
    if not lots and offset != 0:
        offset = 0
        lots = cardinal.telegram_lots[offset: offset + MENU_CFG.FP_LOTS_BTNS_COUNT]

    for index, lot in enumerate(lots):
        keyboard.add(Button(lot.title, callback_data=f"{CBT.ADD_AD_TO_LOT}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.FP_LOTS_BTNS_COUNT, len(lots),
                                            len(cardinal.telegram_lots), CBT.FP_LOTS_LIST)

    keyboard.row(Button("‚ûï –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"{CBT.ADD_AD_TO_LOT_MANUALLY}:{offset}"),
                 Button("üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å FunPay", callback_data=f"update_funpay_lots:{offset}"))\
        .add(Button("üì¶ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data=f"{CBT.CATEGORY}:autoDelivery"))\
        .add(Button("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def edit_lot(cardinal: Cardinal, lot_number: int, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ—Ç–∞ (CBT.EDIT_AD_LOT:<lot_num>:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param lot_number: –Ω–æ–º–µ—Ä –ª–æ—Ç–∞.

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """

    lot = cardinal.AD_CFG.sections()[lot_number]
    lot_obj = cardinal.AD_CFG[lot]
    file_name = lot_obj.get("productsFileName")
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏",
                    callback_data=f"{CBT.EDIT_LOT_DELIVERY_TEXT}:{lot_number}:{offset}"))
    if not file_name:
        keyboard.add(Button("‚õìÔ∏è –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
                            callback_data=f"{CBT.BIND_PRODUCTS_FILE}:{lot_number}:{offset}"))
    else:
        if file_name not in os.listdir("storage/products"):
            with open(f"storage/products/{file_name}", "w", encoding="utf-8"):
                pass
        file_number = os.listdir("storage/products").index(file_name)

        keyboard.row(Button("‚õìÔ∏è –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
                            callback_data=f"{CBT.BIND_PRODUCTS_FILE}:{lot_number}:{offset}"),
                     Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã",
                            callback_data=f"{CBT.ADD_PRODUCTS_TO_FILE}:{file_number}:{lot_number}:{offset}:1"))
    keyboard.row(Button(f"–í—ã–¥–∞—á–∞ {utils.bool_to_text(lot_obj.get('disable'), 'üî¥', 'üü¢')}",
                        callback_data=f"switch_lot:disable:{lot_number}:{offset}"),
                 Button(f"–ú—É–ª—å—Ç–∏-–≤—ã–¥–∞—á–∞ {utils.bool_to_text(lot_obj.get('disableMultiDelivery'), 'üî¥', 'üü¢')}",
                        callback_data=f"switch_lot:disableMultiDelivery:{lot_number}:{offset}"))\
            .row(Button(f"–í–æ—Å—Å—Ç. {utils.bool_to_text(lot_obj.get('disableAutoRestore'), 'üî¥', 'üü¢')}",
                        callback_data=f"switch_lot:disableAutoRestore:{lot_number}:{offset}"),
                 Button(f"–î–µ–∞–∫—Ç. {utils.bool_to_text(lot_obj.get('disableAutoDisable'), 'üî¥', 'üü¢')}",
                        callback_data=f"switch_lot:disableAutoDisable:{lot_number}:{offset}"))\
        .row(Button("üëæ –¢–µ—Å—Ç –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data=f"test_auto_delivery:{lot_number}:{offset}"),
             Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç", callback_data=f"{CBT.DEL_AD_LOT}:{lot_number}:{offset}"))\
        .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.AD_LOTS_LIST}:{offset}"),
             Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{CBT.EDIT_AD_LOT}:{lot_number}:{offset}"))
    return keyboard


def configs() -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–≥—Ä—É–∑–∫–∏ / –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .add(Button("‚§µÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥", callback_data=f"{CBT.DOWNLOAD_CFG}:main")) \
        .add(Button("‚§µÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞", callback_data=f"{CBT.DOWNLOAD_CFG}:autoResponse")) \
        .add(Button("‚§µÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data=f"{CBT.DOWNLOAD_CFG}:autoDelivery")) \
        .add(Button("‚§¥Ô∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥", callback_data="upload_main_config")) \
        .add(Button("‚§¥Ô∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞", callback_data="upload_auto_response_config")) \
        .add(Button("‚§¥Ô∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏", callback_data="upload_auto_delivery_config")) \
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


# –ü—Ä–æ—á–µ–µ
def new_order(order_id: str, confirmation: bool = False, no_refund: bool = False) -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ä–µ–¥–µ—Ä–µ.

    :param order_id: ID –∑–∞–∫–∞–∑–∞ (–±–µ–∑ #).

    :param confirmation: –∑–∞–º–µ–Ω–∏—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏" –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "–î–∞" / "–ù–µ—Ç"?

    :param no_refund: —É–±—Ä–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–µ–Ω–µ–≥?

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–Ω–æ–ø–∫–∏ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã).
    """
    keyboard = types.InlineKeyboardMarkup()
    if not no_refund:
        if confirmation:
            keyboard.row(Button(text="‚úÖ –î–∞", callback_data=f"{CBT.REFUND_CONFIRMED}:{order_id}"),
                         Button(text="‚ùå –ù–µ—Ç", callback_data=f"{CBT.REFUND_CANCELLED}:{order_id}"))
        else:
            keyboard.add(Button(text="üí∏ –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏", callback_data=f"{CBT.REQUEST_REFUND}:{order_id}"))

    keyboard.add(Button(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞", url=f"https://funpay.com/orders/{order_id}/"))
    return keyboard


def reply(node_id: int, username: str) -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é FunPay.

    :param node_id: ID –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param username: –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –≤–µ–¥–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–Ω–æ–ø–∫–∏ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã).
    """
    keyboard = types.InlineKeyboardMarkup()\
        .row(Button(text="üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"{CBT.SEND_FP_MESSAGE}:{node_id}:{username}"),
             Button(text="üìù –ó–∞–≥–æ—Ç–æ–≤–∫–∏", callback_data=f"{CBT.TMPLT_LIST_ANS_MODE}:0:{node_id}:{username}"))
    return keyboard


def templates_list(cardinal: Cardinal, offset: int) \
        -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. (CBT.TMPLT_LIST:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    templates = cardinal.telegram.answer_templates[offset: offset + MENU_CFG.TMPLT_BTNS_COUNT]
    if not templates and offset != 0:
        offset = 0
        templates = cardinal.telegram.answer_templates[offset: offset + MENU_CFG.TMPLT_BTNS_COUNT]

    for index, tmplt in enumerate(templates):
        keyboard.add(Button(tmplt, callback_data=f"{CBT.EDIT_TMPLT}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.TMPLT_BTNS_COUNT, len(templates),
                                            len(cardinal.telegram.answer_templates), CBT.TMPLT_LIST)
    keyboard.add(Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫—É", callback_data=CBT.ADD_TMPLT))\
            .add(Button("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def edit_template(cardinal: Cardinal, template_index: int, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (CBT.EDIT_TMPLT:<template_index>:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param template_index: —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞.

    :param offset: –æ—Ñ—Ñ—Å–µ—Ç —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()\
        .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.TMPLT_LIST}:{offset}"))\
        .add(Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CBT.DEL_TMPLT}:{template_index}:{offset}"))
    return keyboard
