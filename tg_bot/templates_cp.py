"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –æ–ø–∏—Å–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ü–£ —à–∞–±–ª–æ–Ω–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.
–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –≤–∏–¥–µ –ø–ª–∞–≥–∏–Ω–∞.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

from tg_bot import utils, keyboards, CBT

from telebot.types import InlineKeyboardButton as Button
from telebot import types
import logging

logger = logging.getLogger("TGBot")


def init_templates_cp(cardinal: Cardinal, *args):
    tg = cardinal.telegram
    bot = tg.bot

    def check_template_exists(template_index: int, message_obj: types.Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
        –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.

        :param template_index: –∏–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞.

        :param message_obj: —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.

        :return: True, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False, –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        if template_index > len(cardinal.telegram.answer_templates) - 1:
            update_button = types.InlineKeyboardMarkup().add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                                                    callback_data=f"{CBT.TMPLT_LIST}:0"))
            bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{template_index}</code>.",
                                  message_obj.chat.id, message_obj.id,
                                  parse_mode="HTML", reply_markup=update_button)
            return False
        return True

    def open_templates_list(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.
        """
        offset = int(c.data.split(":")[1])
        bot.edit_message_text(f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
                              c.message.chat.id, c.message.id,
                              reply_markup=keyboards.templates_list(cardinal, offset))
        bot.answer_callback_query(c.id)

    def open_templates_list_in_ans_mode(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ (answer_mode).
        """
        bot.answer_callback_query(c.id)

    def open_edit_template_cp(c: types.CallbackQuery):
        split = c.data.split(":")
        template_index, offset = int(split[1]), int(split[2])
        if not check_template_exists(template_index, c.message):
            bot.answer_callback_query(c.id)
            return

        keyboard = keyboards.edit_template(cardinal, template_index, offset)
        template = cardinal.telegram.answer_templates[template_index]

        message = f"""<code>{utils.escape(template)}</code>"""
        bot.edit_message_text(message, c.message.chat.id, c.message.id, reply_markup=keyboard, parse_mode="HTML")
        bot.answer_callback_query(c.id)

    def act_add_template(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞.
        """
        result = bot.send_message(c.message.chat.id,
                                  "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n<code>$username</code> "
                                  "- <i>–Ω–∏–∫–Ω–µ–π–º –Ω–∞–ø–∏—Å–∞–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</i>",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.ADD_TMPLT)
        bot.answer_callback_query(c.id)

    def add_template(m: types.Message):
        # todo: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ offset'—ã.
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        template = m.text.strip()

        if template in tg.answer_templates:
            error_keyboard = types.InlineKeyboardMarkup() \
                .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.TMPLT_LIST}:0"),
                     Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é", callback_data=CBT.ADD_TMPLT))
            bot.reply_to(m, f"‚ùå –¢–∞–∫–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=error_keyboard)
            return

        tg.answer_templates.append(template)
        utils.save_answer_templates(tg.answer_templates)

        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.TMPLT_LIST}:0"),
                 Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=CBT.ADD_TMPLT))

        bot.reply_to(m, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∞:\n"
                        f"<code>{utils.escape(template)}</code>.",
                     allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)

    def del_template(c: types.CallbackQuery):
        split = c.data.split(":")
        template_index, offset = int(split[1]), int(split[2])
        if not check_template_exists(template_index, c.message):
            bot.answer_callback_query(c.id)
            return

        tg.answer_templates.pop(template_index)
        utils.save_answer_templates(tg.answer_templates)
        bot.edit_message_text(f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
                              c.message.chat.id, c.message.id,
                              reply_markup=keyboards.templates_list(cardinal, offset))
        bot.answer_callback_query(c.id)

    def send_template(c: types.CallbackQuery):
        pass

    tg.cbq_handler(open_templates_list, lambda c: c.data.startswith(f"{CBT.TMPLT_LIST}:"))
    tg.cbq_handler(open_templates_list_in_ans_mode, lambda c: c.data.startswith(f"{CBT.TMPLT_LIST_ANS_MODE}:"))
    tg.cbq_handler(open_edit_template_cp, lambda c: c.data.startswith(f"{CBT.EDIT_TMPLT}:"))
    tg.cbq_handler(act_add_template, lambda c: c.data == CBT.ADD_TMPLT)
    tg.msg_handler(add_template, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT.ADD_TMPLT))
    tg.cbq_handler(del_template, lambda c: c.data.startswith(f"{CBT.DEL_TMPLT}:"))


BIND_TO_PRE_INIT = [init_templates_cp]