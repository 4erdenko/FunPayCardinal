"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω Telegram –±–æ—Ç.
"""

from __future__ import annotations
from typing import TYPE_CHECKING

import FunPayAPI.types

if TYPE_CHECKING:
    from cardinal import Cardinal

import os
import time
import random
import string
import psutil
import telebot
import logging
import traceback

from telebot import types
from telebot.types import InlineKeyboardButton as Button

from tg_bot import utils, keyboards, CBT
from Utils import cardinal_tools


logger = logging.getLogger("TGBot")


class TGBot:
    def __init__(self, cardinal: Cardinal):
        self.cardinal = cardinal
        self.bot = telebot.TeleBot(self.cardinal.MAIN_CFG["Telegram"]["token"])

        self.authorized_users = utils.load_authorized_users()
        self.chat_ids = utils.load_chat_ids()

        # [(chat_id, message_id)]
        self.init_messages = []

        # {
        #     chat_id: {
        #         user_id: {
        #            "status": None | "statusText",
        #             "data": { ... },
        #             "msg_id": int
        #         }
        #     }
        # }
        self.user_states = {}

        self.commands = {
            "FunPayCardinal": {
                "menu": "–æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                "notifications": "–≤–∫–ª / –≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
                "commands": "–ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
                "test_lot": "—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏",
                "ban": "–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ß–°",
                "unban": "—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ß–°",
                "block_list": "–ø–æ–ª—É—á–∏—Ç—å –ß–°",
                "logs": "–ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª",
                "about": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
                "sys": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–∏—Å—Ç–µ–º—É",
                "restart": "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞",
                "power_off": "–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"
            }
        }

    # User states
    def get_user_state(self, chat_id: int, user_id: int) -> dict | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param chat_id: id —á–∞—Ç–∞.

        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :return: —Å–æ—Å—Ç–æ—è–Ω–∏–µ + –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ.
        """
        if chat_id not in self.user_states:
            return None
        if user_id not in self.user_states[chat_id]:
            return None
        if self.user_states[chat_id][user_id].get("state") is None:
            return None
        else:
            return self.user_states[chat_id][user_id]

    def set_user_state(self, chat_id: int, message_id: int, user_id: int,
                       state: str, data: dict | None = None) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param chat_id: id —á–∞—Ç–∞.

        :param message_id: id —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

        :param data: –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ.
        """
        if chat_id not in self.user_states:
            self.user_states[chat_id] = {}
        if user_id not in self.user_states[chat_id]:
            self.user_states[chat_id][user_id] = {}
        if self.user_states[chat_id][user_id].get("state") is None and state is None:
            return None
        self.user_states[chat_id][user_id]["state"] = state
        self.user_states[chat_id][user_id]["data"] = {} if data is None else data
        self.user_states[chat_id][user_id]["msg_id"] = message_id

    def clear_user_state(self, chat_id: int, user_id: int, del_msg: bool = False) -> int | None:
        """
        –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param chat_id: id —á–∞—Ç–∞.

        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param del_msg: —É–¥–∞–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

        :return: ID —Å–æ–æ–±—â–µ–Ω–∏—è | None, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø—É—Å—Ç–æ–µ.
        """
        if chat_id not in self.user_states:
            self.user_states[chat_id] = {}
        if user_id not in self.user_states[chat_id]:
            self.user_states[chat_id][user_id] = {}
        if self.user_states[chat_id][user_id].get("state") is None:
            return None

        msg_id = self.user_states[chat_id][user_id]["msg_id"]
        self.user_states[chat_id][user_id]["state"] = None
        self.user_states[chat_id][user_id]["data"] = {}
        self.user_states[chat_id][user_id]["msg_id"] = None

        if del_msg:
            self.bot.delete_message(chat_id, msg_id)

        return msg_id

    def check_state(self, chat_id: int, user_id: int, state: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–º.

        :param chat_id: id —á–∞—Ç–∞.

        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

        :return: True / False
        """
        if chat_id not in self.user_states:
            return False
        if user_id not in self.user_states[chat_id]:
            return False
        if self.user_states[chat_id][user_id].get("state") != state:
            return False
        return True

    # handler binders
    def msg_handler(self, handler, **kwargs):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

        :param handler: —Ö—ç–Ω–¥–ª–µ—Ä.

        :param kwargs: –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–∞.
        """
        bot_instance = self.bot

        @bot_instance.message_handler(**kwargs)
        def run_handler(message: types.Message):
            try:
                handler(message)
            except:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ Telegram –±–æ—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ logs/log.log.")
                logger.debug(traceback.format_exc())

    def cbq_handler(self, handler, func, **kwargs):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä–∏ –Ω–æ–≤–æ–º callback'–µ.

        :param handler: —Ö—ç–Ω–¥–ª–µ—Ä.

        :param func: —Ñ—É–Ω–∫—Ü–∏—è-—Ñ–∏–ª—å—Ç—Ä.

        :param kwargs: –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–∞.
        """
        bot_instance = self.bot

        @bot_instance.callback_query_handler(func, **kwargs)
        def run_handler(call: types.CallbackQuery):
            try:
                handler(call)
            except:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ Telegram –±–æ—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ logs/log.log.")
                logger.debug(traceback.format_exc())

    # –°–∏—Å—Ç–µ–º–∞ —Å–≤–æ–π-—á—É–∂–æ–π 0_0
    def reg_admin(self, message: types.Message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ü–£ TG.
        """
        if message.chat.type != "private":
            return
        if message.text == self.cardinal.MAIN_CFG["Telegram"]["secretKey"]:
            self.authorized_users.append(message.from_user.id)
            utils.save_authorized_users(self.authorized_users)
            text = f"""üîì –î–æ—Å—Ç—É–ø –∫ –ü–£ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!

üîï –£—á—Ç–∏, —á—Ç–æ —Å–µ–π—á–∞—Å —è <b><u>–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∏–∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç —á–∞—Ç</u></b>.

üîî –¢—ã –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å / –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π <b><u>–≤ —ç—Ç–æ—Ç —á–∞—Ç</u></b> —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /notifications.

‚öôÔ∏è –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ <i>FunPay Cardinal</i>, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /menu."""
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{message.from_user.username} (id: {message.from_user.id})$RESET "
                           "–ü–û–õ–£–ß–ò–õ –î–û–°–¢–£–ü –ö –ü–£ TG!")

        else:
            text = f"""üëã –ü—Ä–∏–≤–µ—Ç, <b><i>{message.from_user.username}</i></b>!\n\n‚ùå –¢—ã –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n
üîë –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <u><b>—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å</b></u> (<code>[Telegram]</code> <b>‚Üí</b> <code>secretKey</code>) """ \
                   """–∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≤–≤–µ–ª –≤ –º–æ–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."""
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{message.from_user.username} (id: {message.from_user.id})$RESET "
                           f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ü–£ TG. –°–¥–µ—Ä–∂–∏–≤–∞—é –µ–≥–æ –∫–∞–∫ –º–æ–≥—É!")
        self.bot.send_message(message.chat.id, text, parse_mode="HTML")

    @staticmethod
    def ignore_unauthorized_users(call: types.CallbackQuery):
        """
        –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç callback'–∏ –æ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{call.from_user.username} (id {call.from_user.id})$RESET "
                       f"—Ç—ã–∫–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ü–£ –≤ —á–∞—Ç–µ $MAGENTA@{call.message.chat.username}"
                       f" (id {call.message.chat.id})$RESET. –°–¥–µ—Ä–∂–∏–≤–∞—é –µ–≥–æ –∫–∞–∫ –º–æ–≥—É!")
        return

    # –ö–æ–º–∞–Ω–¥—ã
    def send_settings_menu(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).
        """
        self.bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                              reply_markup=keyboards.settings_sections())

    def switch_notifications(self, message: types.Message):
        """
        –í–∫–ª—é—á–∞–µ—Ç / –æ—Ç–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
        """
        if message.chat.id in self.chat_ids:
            self.chat_ids.remove(message.chat.id)
            utils.save_chat_ids(self.chat_ids)
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{message.from_user.username} (id: {message.from_user.id})$RESET –≤—ã–∫–ª—é—á–∏–ª "
                f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ $MAGENTA@{message.chat.username} (id {message.chat.id})$RESET.")
            self.bot.send_message(message.chat.id, "üîï –¢–µ–ø–µ—Ä—å –≤ —ç—Ç–æ—Ç —á–∞—Ç –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        else:
            self.chat_ids.append(message.chat.id)
            utils.save_chat_ids(self.chat_ids)
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{message.from_user.username} (id: {message.from_user.id})$RESET –≤–∫–ª—é—á–∏–ª "
                f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ $MAGENTA@{message.chat.username} (id {message.chat.id})$RESET.")
            self.bot.send_message(message.chat.id, "üîî –¢–µ–ø–µ—Ä—å –≤ —ç—Ç–æ—Ç —á–∞—Ç –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

    def send_commands_help(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
        """
        self.bot.send_message(message.chat.id, utils.generate_help_text(self.commands), parse_mode="HTML")

    def act_manual_delivery_test(self, message: types.Message):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.
        """
        result = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞, —Ç–µ—Å—Ç –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ "
                                                        "–ø—Ä–æ–≤–µ—Å—Ç–∏.",
                                       reply_markup=keyboards.CLEAR_STATE_BTN)
        self.set_user_state(message.chat.id, result.id, message.from_user.id, CBT.MANUAL_AD_TEST)

    def manual_delivery_text(self, message: types.Message):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º).
        """
        self.clear_user_state(message.chat.id, message.from_user.id, True)
        lot_name = message.text.strip()
        simbols = string.ascii_letters + "0123456789"
        key = "".join(random.sample(simbols, 50))

        self.cardinal.delivery_tests[key] = lot_name

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{message.from_user.username} (id: {message.from_user.id})$RESET —Å–æ–∑–¥–∞–ª "
            f"–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –ª–æ—Ç–∞ $YELLOW[{lot_name}]$RESET: $CYAN{key}$RESET.")

        self.bot.send_message(message.chat.id,
                              f"‚úÖ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –ª–æ—Ç–∞ "
                              f"<b>[</b><code>{utils.escape(lot_name)}</code><b>]</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. \n\n"
                              f"–î–ª—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–∏–∑—É –≤ –ª—é–±–æ–π —á–∞—Ç FunPay (–õ–°)."
                              f"\n\n<code>!–∞–≤—Ç–æ–≤—ã–¥–∞—á–∞ {key}</code>", parse_mode="HTML")

    def act_ban(self, message: types.Message):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–°.
        """
        result = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –ß–°.",
                                       reply_markup=keyboards.CLEAR_STATE_BTN)
        self.set_user_state(message.chat.id, result.id, message.from_user.id, CBT.BAN)

    def ban(self, message: types.Message):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ß–°.
        """
        self.clear_user_state(message.chat.id, message.from_user.id, True)
        nickname = message.text.strip()

        if nickname in self.cardinal.block_list:
            self.bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{nickname}</code> —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ß–°.",
                                  parse_mode="HTML")
            return
        self.cardinal.block_list.append(nickname)
        cardinal_tools.cache_block_list(self.cardinal.block_list)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{message.from_user.username} (id: {message.from_user.id})$RESET "
                    f"–¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $YELLOW{nickname}$RESET –≤ –ß–°.")
        self.bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{nickname}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°.",
                              parse_mode="HTML")

    def act_unban(self, message: types.Message):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ß–°.
        """
        result = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤ –ß–°.",
                                       reply_markup=keyboards.CLEAR_STATE_BTN)
        self.set_user_state(message.chat.id, result.id, message.from_user.id, CBT.UNBAN)

    def unban(self, message: types.Message):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ß–°.
        """
        self.clear_user_state(message.chat.id, message.from_user.id, True)
        nickname = message.text.strip()
        if nickname not in self.cardinal.block_list:
            self.bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{nickname}</code> –Ω–µ—Ç –≤ –ß–°.",
                                  parse_mode="HTML")
            return
        self.cardinal.block_list.remove(nickname)
        cardinal_tools.cache_block_list(self.cardinal.block_list)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{message.from_user.username} (id: {message.from_user.id})$RESET "
                    f"—É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $YELLOW{nickname}$RESET –∏–∑ –ß–°.")
        self.bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{nickname}</code> —É–¥–∞–ª–µ–Ω –∏–∑ –ß–°.",
                              parse_mode="HTML")

    def send_ban_list(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ß–°.
        """
        if not self.cardinal.block_list:
            self.bot.send_message(message.chat.id, "‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return
        block_list = ", ".join(f"<code>{nickname}</code>" for nickname in self.cardinal.block_list)
        self.bot.send_message(message.chat.id, block_list, parse_mode="HTML")

    def send_logs(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤.
        """
        if not os.path.exists("logs/log.log"):
            self.bot.send_message(message.chat.id, "‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
        else:
            with open("logs/log.log", "r", encoding="utf-8") as f:
                self.bot.send_document(message.chat.id, f)

    def send_about_text(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –æ –±–æ—Ç–µ.
        """
        self.bot.send_message(message.chat.id, utils.ABOUT_TEXT)

    def send_system_info(self, msg: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–∏—Å—Ç–µ–º—É.
        """
        current_time = int(time.time())
        run_time = current_time - self.cardinal.start_time

        ram = psutil.virtual_memory()
        cpu_usage = "\n".join(
            f"    CPU {i}:  <code>{l}%</code>" for i, l in enumerate(psutil.cpu_percent(percpu=True)))
        self.bot.send_message(msg.chat.id, f"""<b><u>–°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö</u></b>

<b>–¶–ü:</b>
{cpu_usage}
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º: <code>{psutil.Process().cpu_percent()}%</code>

<b>–û–ó–£:</b>
    –í—Å–µ–≥–æ:  <code>{ram.total // 1048576} MB</code>
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:  <code>{ram.used // 1048576} MB</code>
    –°–≤–æ–±–æ–¥–Ω–æ:  <code>{ram.free // 1048576} MB</code>
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º:  <code>{psutil.Process().memory_info().rss // 1048576} MB</code>

<b>–ë–æ—Ç:</b>
    –ê–ø—Ç–∞–π–º:  <code>{cardinal_tools.time_to_str(run_time)}</code>
    –ß–∞—Ç:  <code>{msg.chat.id}</code>""", parse_mode="HTML")

    def restart_cardinal(self, msg: types.Message):
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª.
        """
        self.bot.send_message(msg.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Å—å...")
        cardinal_tools.restart_program()

    def ask_power_off(self, msg: types.Message):
        """
        –ü—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ FPC.
        """
        self.bot.send_message(msg.chat.id, """<b><u>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –º–µ–Ω—è?</u></b>\n
–í–∫–ª—é—á–∏—Ç—å –º–µ–Ω—è —á–µ—Ä–µ–∑ <i>Telegram</i>-–ü–£ <b><u>–Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è!</u></b>""",
                              reply_markup=keyboards.power_off(self.cardinal.instance_id, 0), parse_mode="HTML")

    def cancel_power_off(self, call: types.CallbackQuery):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏–µ (—É–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è).
        """
        self.bot.edit_message_text("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.id)
        self.bot.answer_callback_query(call.id)

    def power_off(self, call: types.CallbackQuery):
        """
        –û—Ç–∫–ª—é—á–∞–µ—Ç FPC.
        """
        split = call.data.split(":")
        state = int(split[1])
        instance_id = int(split[2])

        if instance_id != self.cardinal.instance_id:
            self.bot.edit_message_text("‚ùå –î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫—É.\n–í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç–æ –º–µ–Ω—é —Å–Ω–æ–≤–∞.",
                                       call.message.chat.id, call.message.id)
            self.bot.answer_callback_query(call.id)
            return

        if state == 6:
            self.bot.edit_message_text("–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ, –≤—ã–∫–ª—é—á–∞—é—Å—å...", call.message.chat.id, call.message.id)
            self.bot.answer_callback_query(call.id)
            cardinal_tools.shut_down()
            return

        texts = ["–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–ø—Ä–æ—à—É –µ—â–µ —Ä–∞–∑.\n\n<b><u>–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã?</u></b>",

                 """–ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:\n             
–≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É (–Ω—É –∏–ª–∏ –≥–¥–µ —è —Ç–∞–º —É –≤–∞—Å) –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–µ–Ω—è –≤—Ä—É—á–Ω—É—é!""",

                 """–ù–µ —Ç–æ —á—Ç–æ–±—ã —è –Ω–∞–≤—è–∑—ã–≤–∞—é—Å—å, –Ω–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞, –≤—ã –º–æ–∂–µ—Ç–µ 
–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /restart.""",

                 """–í—ã –≤–æ–æ–±—â–µ —á–∏—Ç–∞–µ—Ç–µ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è? –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞ –≤–∞—Å –Ω–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–∞ = –Ω–µ—Ç, –Ω–µ—Ç = –¥–∞. """ +
                 """–£–≤–µ—Ä–µ–Ω, –≤—ã –¥–∞–∂–µ –Ω–µ —á–∏—Ç–∞–µ—Ç–µ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –≤–µ–¥—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ—É —Ç—É—Ç –ø–∏—à—É.""",

                 "–ù—É —Ç–æ –µ—Å—Ç—å —Ç–≤–µ—Ä–¥–æ –∏ —á–µ—Ç–∫–æ, –¥—ç?"]

        self.bot.edit_message_text(texts[state - 1], call.message.chat.id, call.message.id,
                                   reply_markup=keyboards.power_off(instance_id, state), parse_mode="HTML")
        self.bot.answer_callback_query(call.id)

    # –ß–∞—Ç FunPay
    def act_send_funpay_message(self, call: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —Å—Å–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –≤ —á–∞—Ç FunPay.
        """
        split = call.data.split(":")
        node_id = int(split[1])
        try:
            username = split[2]
        except IndexError:
            username = None
        result = self.bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
                                       reply_markup=keyboards.CLEAR_STATE_BTN)
        self.set_user_state(call.message.chat.id, result.id, call.from_user.id,
                            CBT.SEND_FP_MESSAGE, {"node_id": node_id, "username": username})
        self.bot.answer_callback_query(call.id)

    def send_funpay_message(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç FunPay.
        """
        data = self.get_user_state(message.chat.id, message.from_user.id)["data"]
        node_id, username = data["node_id"], data["username"]
        self.clear_user_state(message.chat.id, message.from_user.id, True)
        response_text = message.text.strip()
        new_msg_obj = FunPayAPI.types.Message(response_text, node_id, None)
        result = self.cardinal.send_message(new_msg_obj)
        if result:
            keyboard = types.InlineKeyboardMarkup() \
                .add(Button("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"{CBT.SEND_FP_MESSAGE}:{node_id}:{username}"))
            self.bot.reply_to(message, f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫—É '
                                       f'<a href="https://funpay.com/chat/?node={node_id}">{username}</a>.',
                              allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup() \
                .add(Button("üì® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"{CBT.SEND_FP_MESSAGE}:{node_id}:{username}"))
            self.bot.reply_to(message, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫—É '
                                       f'<a href="https://funpay.com/chat/?node={node_id}">{username}</a>. '
                                       f'–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ <code>logs/log.log</code>',
                              allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)

    # –û—Ä–¥–µ—Ä
    def ask_to_confirm_refund(self, call: types.CallbackQuery):
        """
        –ü—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥.
        """
        order_id = call.data.split(":")[1]
        keyboard = keyboards.new_order(order_id, confirmation=True)
        self.bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=keyboard)
        self.bot.answer_callback_query(call.id)

    def cancel_refund(self, call: types.CallbackQuery):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç.
        """
        order_id = call.data.split(":")[1]
        keyboard = keyboards.new_order(order_id)
        self.bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=keyboard)
        self.bot.answer_callback_query(call.id)

    def refund(self, call: types.CallbackQuery):
        """
        –û—Ñ–æ—Ä–º–ª—è–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∑–∞ –∑–∞–∫–∞–∑.
        """
        order_id = call.data.split(":")[1]
        new_msg = False
        attempts = 3
        while attempts:
            try:
                self.cardinal.account.refund_order(order_id)
                break
            except:
                if not new_msg:
                    new_msg = self.bot.send_message(call.message.chat.id,
                                                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –∑–∞–∫–∞–∑—É <code>#{order_id}</code>."
                                                    f"\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <code>{attempts}</code>.",
                                                    parse_mode="HTML")
                else:
                    self.bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –∑–∞–∫–∞–∑—É <code>#{order_id}</code>."
                                               f"\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <code>{attempts}</code>.",
                                               new_msg.chat.id, new_msg.id, parse_mode="HTML")
                attempts -= 1
                time.sleep(1)
                continue

        if attempts:
            if not new_msg:
                self.bot.send_message(call.message.chat.id,
                                      f"‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –∑–∞–∫–∞–∑—É <code>#{order_id}</code> –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", parse_mode="HTML")
            else:
                self.bot.edit_message_text(f"‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –∑–∞–∫–∞–∑—É <code>#{order_id}</code> –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.",
                                           new_msg.chat.id, new_msg.id, parse_mode="HTML")

            keyboard = keyboards.new_order(order_id, no_refund=True)
            self.bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=keyboard)
            self.bot.answer_callback_query(call.id)
            return

        self.bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –∑–∞–∫–∞–∑—É <code>#{order_id}</code>.",
                                   new_msg.chat.id, new_msg.id, parse_mode="HTML")

        keyboard = keyboards.new_order(order_id)
        self.bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=keyboard)
        self.bot.answer_callback_query(call.id)

    # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    def open_cp(self, call: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ).
        """
        self.bot.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                                   call.message.chat.id, call.message.id, reply_markup=keyboards.settings_sections())
        self.bot.answer_callback_query(call.id)

    def switch_param(self, call: types.CallbackQuery):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FPC.
        """
        split = call.data.split(":")
        section, option = split[1], split[2]
        self.cardinal.MAIN_CFG[section][option] = "0" if self.cardinal.MAIN_CFG[section].getboolean(option) else "1"

        self.cardinal.save_config(self.cardinal.MAIN_CFG, "configs/_main.cfg")
        if section == "FunPay":
            self.bot.edit_message_reply_markup(call.message.chat.id, call.message.id,
                                               reply_markup=keyboards.main_settings(self.cardinal))
        elif section == "Telegram":
            self.bot.edit_message_reply_markup(call.message.chat.id, call.message.id,
                                               reply_markup=keyboards.notifications_settings(self.cardinal))
        elif section == "BlockList":
            self.bot.edit_message_reply_markup(call.message.chat.id, call.message.id,
                                               reply_markup=keyboards.block_list_settings(self.cardinal))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{call.from_user.username} (id: {call.from_user.id})$RESET –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä "
                    f"$CYAN{option}$RESET —Å–µ–∫—Ü–∏–∏ $YELLOW[{section}]$RESET "
                    f"–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ $YELLOW{self.cardinal.MAIN_CFG[section][option]}$RESET.")
        self.bot.answer_callback_query(call.id)

    def open_settings_section(self, call: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        """
        section = call.data.split(":")[1]
        if section == "main":
            self.bot.edit_message_text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ FPC.",
                                       call.message.chat.id, call.message.id,
                                       reply_markup=keyboards.main_settings(self.cardinal))
        elif section == "telegram":
            self.bot.edit_message_text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.",
                                       call.message.chat.id, call.message.id,
                                       reply_markup=keyboards.notifications_settings(self.cardinal))
        elif section == "blockList":
            self.bot.edit_message_text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. "
                                       "–í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ, "
                                       "–ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ß–°.",
                                       call.message.chat.id, call.message.id,
                                       reply_markup=keyboards.block_list_settings(self.cardinal))
        elif section == "autoResponse":
            self.bot.edit_message_text("–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.",
                                       call.message.chat.id, call.message.id, reply_markup=keyboards.ar_settings())
        elif section == "autoDelivery":
            self.bot.edit_message_text("–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏, "
                                       "–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ç.–¥.",
                                       call.message.chat.id, call.message.id, reply_markup=keyboards.ad_settings())
        self.bot.answer_callback_query(call.id)

    # –ü—Ä–æ—á–µ–µ
    def cancel_action(self, call: types.CallbackQuery):
        """
        –û–±–Ω—É–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —è–≤–ª—è—é—â–∏–π—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        """
        result = self.clear_user_state(call.message.chat.id, call.from_user.id)
        if result is None:
            self.bot.answer_callback_query(call.id)
            return
        else:
            self.bot.delete_message(call.message.chat.id, call.message.id)
            self.bot.answer_callback_query(call.id)

    def __init_commands(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
        """
        self.msg_handler(self.reg_admin, func=lambda msg: msg.from_user.id not in self.authorized_users)
        self.cbq_handler(self.ignore_unauthorized_users,
                         lambda call: call.from_user.id not in self.authorized_users)

        self.msg_handler(self.send_settings_menu, commands=["menu"])
        self.msg_handler(self.send_commands_help, commands=["commands"])
        self.msg_handler(self.act_manual_delivery_test, commands=["test_lot"])
        self.msg_handler(self.manual_delivery_text,
                         func=lambda m: self.check_state(m.chat.id, m.from_user.id, CBT.MANUAL_AD_TEST))
        self.msg_handler(self.switch_notifications, commands=["notifications"])
        self.msg_handler(self.act_ban, commands=["ban"])
        self.msg_handler(self.ban, func=lambda m: self.check_state(m.chat.id, m.from_user.id, CBT.BAN))
        self.msg_handler(self.act_unban, commands=["unban"])
        self.msg_handler(self.unban, func=lambda m: self.check_state(m.chat.id, m.from_user.id, CBT.UNBAN))
        self.msg_handler(self.send_ban_list, commands=["block_list"])
        self.msg_handler(self.send_logs, commands=["logs"])
        self.msg_handler(self.send_about_text, commands=["about"])
        self.msg_handler(self.send_system_info, commands=["sys"])
        self.msg_handler(self.restart_cardinal, commands=["restart"])
        self.msg_handler(self.ask_power_off, commands=["power_off"])

        self.cbq_handler(self.act_send_funpay_message, lambda c: c.data.startswith(f"{CBT.SEND_FP_MESSAGE}:"))
        self.msg_handler(self.send_funpay_message,
                         func=lambda m: self.check_state(m.chat.id, m.from_user.id, CBT.SEND_FP_MESSAGE))
        self.cbq_handler(self.ask_to_confirm_refund, lambda call: call.data.startswith(f"{CBT.REQUEST_REFUND}:"))
        self.cbq_handler(self.cancel_refund, lambda call: call.data.startswith(f"{CBT.REFUND_CANCELLED}:"))
        self.cbq_handler(self.refund, lambda call: call.data.startswith(f"{CBT.REFUND_CONFIRMED}:"))
        self.cbq_handler(self.open_cp, lambda call: call.data == CBT.MAIN)
        self.cbq_handler(self.open_settings_section, lambda call: call.data.startswith(f"{CBT.CATEGORY}:"))
        self.cbq_handler(self.switch_param, lambda call: call.data.startswith(f"{CBT.SWITCH}:"))
        self.cbq_handler(self.power_off, lambda call: call.data.startswith(f"{CBT.SHUT_DOWN}:"))
        self.cbq_handler(self.cancel_power_off, lambda call: call.data == CBT.CANCEL_SHUTTING_DOWN)
        self.cbq_handler(self.cancel_action, lambda c: c.data == CBT.CLEAR_USER_STATE)

    def send_notification(self, text: str, inline_keyboard=None, init_notification=False):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ self.chat_ids.

        :param text: —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

        :param inline_keyboard: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

        :param init_notification: —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ Telegram-–±–æ—Ç–∞?
        """
        for chat_id in self.chat_ids:
            try:
                if inline_keyboard is None:
                    new_msg = self.bot.send_message(chat_id, text, parse_mode='HTML')
                else:
                    new_msg = self.bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=inline_keyboard)

                if init_notification:
                    self.init_messages.append((new_msg.chat.id, new_msg.id))
            except:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.")
                logger.debug(traceback.format_exc())
                continue

    def add_command(self, plugin_name: str, command: str, help_text: str) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.

        :param plugin_name: –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ (–ª—É—á—à–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é __name__).

        :param command: —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.

        :param help_text: —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏.
        """
        if self.commands.get(plugin_name) is None:
            self.commands[plugin_name] = {}

        self.commands[plugin_name][command] = help_text

    def setup(self):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.
        """
        commands = []

        for module in self.commands:
            for command in self.commands[module]:
                commands.append(types.BotCommand(f"/{command}", self.commands[module][command]))
        self.bot.set_my_commands(commands)

    def init(self):
        self.__init_commands()
        self.setup()
        logger.info("$MAGENTATelegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥.
        """
        self.send_notification("""‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!

‚úÖ –°–µ–π—á–∞—Å –≤—ã —É–∂–µ <b><u>–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏</u></b> –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é <b><u>–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª <i>Telegram</i>-–±–æ—Ç–∞</u></b>.

‚ùå –£—á—Ç–∏—Ç–µ, —á—Ç–æ <i>FunPay Cardinal</i> –µ—â–µ <b><u>–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω</u></b> –∏ <b><u>–Ω–∏–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç</u></b>.

üîÉ –ö–∞–∫ —Ç–æ–ª—å–∫–æ <i>FunPay Cardinal</i> –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è - –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è.

üìã –ï—Å–ª–∏ <i>FPC</i> –¥–æ–ª–≥–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /logs""", init_notification=True)
        try:
            logger.info(f"$CYANTelegram –±–æ—Ç $YELLOW@{self.bot.user.username} $CYAN–∑–∞–ø—É—â–µ–Ω.")
            self.bot.infinity_polling(logger_level=logging.DEBUG)
        except:
            logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram (–≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω?).")
            logger.debug(traceback.format_exc())
