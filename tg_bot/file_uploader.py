"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–∞.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal
    from tg_bot.bot import TGBot

from Utils import config_loader as cfg_loader, exceptions as excs, cardinal_tools
from telebot.types import InlineKeyboardButton as Button
from tg_bot import utils, keyboards, CBT
from telebot import types
import logging
import os


logger = logging.getLogger("TGBot")


def check_file(tg: TGBot, msg: types.Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª. –ß–∏—Å—Ç–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ TG –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—à–∏–±–∫–∏.

    :param tg: —ç–∫–∑–µ–º–ø–ª—è—Ä TG –±–æ—Ç–∞.

    :param msg: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.

    :return: True, –µ—Å–ª–∏ –≤—Å–µ –æ–∫, False, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –ø—Ä–æ—à–µ–ª.
    """
    if not msg.document:
        tg.bot.send_message(msg.chat.id, "‚ùå –§–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
        return False
    if not any((msg.document.file_name.endswith(".cfg"), msg.document.file_name.endswith(".txt"),
                msg.document.file_name.endswith(".py"))):
        tg.bot.send_message(msg.chat.id, "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º.")
        return False
    if msg.document.file_size >= 20971520:
        tg.bot.send_message(msg.chat.id, "‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–ú–ë.")
        return False
    return True


def download_file(tg: TGBot, msg: types.Message, file_name: str = "temp_file.txt",
                  custom_path: str = "") -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É storage/cache/.

    :param tg: —ç–∫–∑–µ–º–ø–ª—è—Ä TG –±–æ—Ç–∞.

    :param msg: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.

    :param file_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    :param custom_path: –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å (–µ—Å–ª–∏ –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ –≤ storage/cache/).

    :return: True, –µ—Å–ª–∏ –≤—Å–µ –æ–∫, False, –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    tg.bot.send_message(msg.chat.id, "‚è¨ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    try:
        file_info = tg.bot.get_file(msg.document.file_id)
        file = tg.bot.download_file(file_info.file_path)
    except:
        tg.bot.send_message(msg.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                                         "<code>logs/log.log</code>.", parse_mode="HTML")
        logger.debug("------TRACEBACK------", exc_info=True)
        return False

    path = f"storage/cache/{file_name}" if not custom_path else os.path.join(custom_path, file_name)
    with open(path, "wb") as new_file:
        new_file.write(file)
    return True


def init_uploader(cardinal: Cardinal):
    tg = cardinal.telegram
    bot = tg.bot

    def act_upload_products_file(c: types.CallbackQuery):
        result = bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.UPLOAD_PRODUCTS_FILE)
        bot.answer_callback_query(c.id)

    def upload_products_file(m: types.Message):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        if not check_file(tg, m):
            return
        if not download_file(tg, m, m.document.file_name,
                             custom_path=f"storage/products"):
            return

        try:
            products_count = cardinal_tools.count_products(f"storage/products/{utils.escape(m.document.file_name)}")
        except:
            bot.send_message(m.chat.id,
                             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                             "<code>logs/log.log</code>.", parse_mode="HTML")
            logger.debug("------TRACEBACK------", exc_info=True)
            return

        file_number = os.listdir("storage/products").index(m.document.file_name)

        keyboard = types.InlineKeyboardMarkup() \
            .add(Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_number}:0"))

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ $YELLOWstorage/products/{m.document.file_name}$RESET.")

        bot.send_message(m.chat.id,
                         f"‚úÖ –§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ <code>storage/products/{m.document.file_name}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. "
                         f"–¢–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ: <code>{products_count}.</code>",
                         parse_mode="HTML", reply_markup=keyboard)

    def act_upload_main_config(c: types.CallbackQuery):
        result = bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, "upload_main_config")
        bot.answer_callback_query(c.id)

    def upload_main_config(m: types.Message):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.
        """
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        if not check_file(tg, m):
            return
        if not download_file(tg, m, "temp_main.cfg"):
            return

        bot.send_message(m.chat.id, "üîÅ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")
        try:
            new_config = cfg_loader.load_main_config("storage/cache/temp_main.cfg")
        except excs.ConfigParseError as e:
            bot.send_message(m.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: "
                                        f"<code>{utils.escape(str(e))}</code>", parse_mode="HTML")
            return
        except UnicodeDecodeError:
            bot.send_message(m.chat.id,
                             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ <code>UTF-8</code>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ "
                             "—Ñ–∞–π–ª–∞ = <code>UTF-8</code>, –∞ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫ = <code>LF</code>.",
                             parse_mode="HTML")
            return
        except:
            bot.send_message(m.chat.id,
                             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                             "<code>logs/log.log</code>", parse_mode="HTML")
            logger.debug("------TRACEBACK------", exc_info=True)
            return

        cardinal.save_config(new_config, "configs/_main.cfg")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.")
        bot.send_message(m.chat.id, "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. \n"
                                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞, —á—Ç–æ –±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. \n"
                                    "–õ—é–±–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞ –ü–£ –æ—Ç–º–µ–Ω–∏—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

    def act_upload_auto_response_config(c: types.CallbackQuery):
        result = bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, "upload_auto_response_config")
        bot.answer_callback_query(c.id)

    def upload_auto_response_config(m: types.Message):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.
        """
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        if not check_file(tg, m):
            return
        if not download_file(tg, m, "temp_auto_response.cfg"):
            return

        bot.send_message(m.chat.id, "üîÅ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")
        try:
            new_config = cfg_loader.load_auto_response_config("storage/cache/temp_auto_response.cfg")
            raw_new_config = cfg_loader.load_raw_auto_response_config("storage/cache/temp_auto_response.cfg")
        except excs.ConfigParseError as e:
            bot.send_message(m.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: "
                                        f"<code>{utils.escape(str(e))}</code>", parse_mode="HTML")
            return
        except UnicodeDecodeError:
            bot.send_message(m.chat.id,
                             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ <code>UTF-8</code>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ "
                             "—Ñ–∞–π–ª–∞ = <code>UTF-8</code>, –∞ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫ = <code>LF</code>.",
                             parse_mode="HTML")
            return
        except:
            bot.send_message(m.chat.id,
                             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                             "<code>logs/log.log</code>", parse_mode="HTML")
            logger.debug("------TRACEBACK------", exc_info=True)
            return

        cardinal.RAW_AR_CFG, cardinal.AR_CFG = raw_new_config, new_config
        cardinal.save_config(cardinal.RAW_AR_CFG, "configs/auto_response.cfg")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.")
        bot.send_message(m.chat.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.")

    def act_upload_auto_delivery_config(c: types.CallbackQuery):
        result = bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, "upload_auto_delivery_config")
        bot.answer_callback_query(c.id)

    def upload_auto_delivery_config(m: types.Message):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.
        """
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        if not check_file(tg, m):
            return
        if not download_file(tg, m, "temp_auto_delivery.cfg"):
            return

        bot.send_message(m.chat.id, "üîÅ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")
        try:
            new_config = cfg_loader.load_auto_delivery_config("storage/cache/temp_auto_delivery.cfg")
        except excs.ConfigParseError as e:
            bot.send_message(m.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏: "
                                        f"<code>{utils.escape(str(e))}</code>", parse_mode="HTML")
            return
        except UnicodeDecodeError:
            bot.send_message(m.chat.id,
                             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ <code>UTF-8</code>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ "
                             "—Ñ–∞–π–ª–∞ = <code>UTF-8</code>, –∞ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫ = <code>LF</code>.",
                             parse_mode="HTML")
            return
        except:
            bot.send_message(m.chat.id,
                             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                             "<code>logs/log.log</code>", parse_mode="HTML")
            logger.debug("------TRACEBACK------", exc_info=True)
            return

        cardinal.AD_CFG = new_config
        cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.")
        bot.send_message(m.chat.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.")

    def upload_plugin(m: types.Message):
        offset = tg.get_user_state(m.chat.id, m.from_user.id)["data"]["offset"]
        if not check_file(tg, m):
            return
        if not download_file(tg, m, f"{utils.escape(m.document.file_name)}",
                             custom_path=f"plugins"):
            return

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET "
                    f"–∑–∞–≥—Ä—É–∑–∏–ª –≤ –±–æ—Ç–∞ –ø–ª–∞–≥–∏–Ω $YELLOWplugins/{m.document.file_name}$RESET.")

        keyboard = types.InlineKeyboardMarkup() \
            .add(Button("‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGINS_LIST}:{offset}"))
        bot.send_message(m.chat.id,
                         f"‚úÖ –ü–ª–∞–≥–∏–Ω <code>{utils.escape(m.document.file_name)}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.\n\n"
                         f"‚ö†Ô∏è–ß—Ç–æ–±—ã –ø–ª–∞–≥–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è, <u><b>–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ FPC!</b></u> (/restart)",
                         parse_mode="HTML", reply_markup=keyboard)

    tg.cbq_handler(act_upload_products_file, lambda c: c.data == CBT.UPLOAD_PRODUCTS_FILE)
    tg.cbq_handler(act_upload_auto_response_config, lambda c: c.data == "upload_auto_response_config")
    tg.cbq_handler(act_upload_auto_delivery_config, lambda c: c.data == "upload_auto_delivery_config")
    tg.cbq_handler(act_upload_main_config, lambda c: c.data == "upload_main_config")

    tg.file_handler(CBT.UPLOAD_PRODUCTS_FILE, upload_products_file)
    tg.file_handler("upload_auto_response_config", upload_auto_response_config)
    tg.file_handler("upload_auto_delivery_config", upload_auto_delivery_config)
    tg.file_handler("upload_main_config", upload_main_config)
    tg.file_handler(CBT.UPLOAD_PLUGIN, upload_plugin)


BIND_TO_PRE_INIT = [init_uploader]
