"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –æ–ø–∏—Å–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ü–£ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.
–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –≤–∏–¥–µ –ø–ª–∞–≥–∏–Ω–∞.
"""

from __future__ import annotations

import datetime
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

from tg_bot import utils, keyboards, CBT
from telebot.types import InlineKeyboardButton as Button
from telebot import types

from Utils import cardinal_tools

import traceback
import itertools
import random
import string
import logging
import os


logger = logging.getLogger("TGBot")


def init_auto_delivery_cp(cardinal: Cardinal, *args):
    tg = cardinal.telegram
    bot = tg.bot

    def check_ad_lot_exists(lot_index: int, message_obj: types.Message, reply_mode: bool = True) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ—Ç —Å –∞–≤—Ç–æ-–≤—ã–¥–∞—á–µ–π —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
        –ï—Å–ª–∏ –ª–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤ —Å –∞–≤—Ç–æ-–≤—ã–¥–∞—á–µ–π.

        :param lot_index: —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å –ª–æ—Ç–∞.

        :param message_obj: —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.

        :param reply_mode: —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –ï—Å–ª–∏ True - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        –µ—Å–ª–∏ False - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        :return: True, –µ—Å–ª–∏ –ª–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False, –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        if lot_index > len(cardinal.AD_CFG.sections()) - 1:
            update_button = types.InlineKeyboardMarkup().add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                                                    callback_data=f"{CBT.AD_LOTS_LIST}:0"))
            if reply_mode:
                bot.reply_to(message_obj, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–æ—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{lot_index}</code>.",
                             allow_sending_without_reply=True, parse_mode="HTML", reply_markup=update_button)
            else:
                bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–æ—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{lot_index}</code>.",
                                      message_obj.chat.id, message_obj.id,
                                      parse_mode="HTML", reply_markup=update_button)
            return False
        return True

    def check_products_file_exists(pf_index: int, files_list: list[str],
                                   message_obj: types.Message, reply_mode: bool = True) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
        –ï—Å–ª–∏ –ª–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.

        :param pf_index: —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.

        :param files_list: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤.

        :param message_obj: —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.

        :param reply_mode: —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –ï—Å–ª–∏ True - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        –µ—Å–ª–∏ False - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        :return: True, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False, –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        if pf_index > len(files_list) - 1:
            update_button = types.InlineKeyboardMarkup().add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                                                    callback_data=f"{CBT.PRODUCTS_FILES_LIST}:0"))
            if reply_mode:
                bot.reply_to(message_obj, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{pf_index}</code>.",
                             allow_sending_without_reply=True, parse_mode="HTML", reply_markup=update_button)
            else:
                bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{pf_index}</code>.",
                                      message_obj.chat.id, message_obj.id,
                                      parse_mode="HTML", reply_markup=update_button)
            return False
        return True

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.
    def open_lots_list(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ —Å –∞–≤—Ç–æ-–≤—ã–¥–∞—á–µ–π.
        """
        offset = int(c.data.split(":")[1])
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ª–æ—Ç.", c.message.chat.id, c.message.id,
                              reply_markup=keyboards.lots_list(cardinal, offset))
        bot.answer_callback_query(c.id)

    def open_funpay_lots_list(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ FunPay.
        """
        offset = int(c.data.split(":")[1])
        bot.edit_message_text(f"""–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ª–æ—Ç (–≤—Å–µ –ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é —Å –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã FunPay).

"""
                              f"""<i>–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: </i>"""
                              f"""<code>{cardinal.last_telegram_lots_update.strftime("%d.%m.%Y %H:%M:%S")}</code>""",
                              c.message.chat.id, c.message.id,
                              parse_mode="HTML", reply_markup=keyboards.funpay_lots_list(cardinal, offset))
        bot.answer_callback_query(c.id)

    def act_add_lot(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.
        """
        offset = int(c.data.split(":")[1])
        result = bot.send_message(c.message.chat.id, "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ —Å FunPay –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.ADD_AD_TO_LOT_MANUALLY,
                          data={"offset": offset})
        bot.answer_callback_query(c.id)

    def add_lot(m: types.Message):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ª–æ—Ç –¥–ª—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.
        """
        fp_lots_offset = tg.get_user_state(m.chat.id, m.from_user.id)["data"]["offset"]
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        lot = m.text.strip()
        error_keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.FP_LOTS_LIST}:{fp_lots_offset}"),
                 Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π", callback_data=f"{CBT.ADD_AD_TO_LOT_MANUALLY}:{fp_lots_offset}"))

        if lot in cardinal.AD_CFG.sections():
            bot.reply_to(m, f"‚ùå –õ–æ—Ç <code>{utils.escape(lot)}</code> —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=error_keyboard)
            return

        cardinal.AD_CFG.add_section(lot)
        cardinal.AD_CFG.set(lot, "response", """–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, $username!

–í–æ—Ç —Ç–≤–æ–π —Ç–æ–≤–∞—Ä:
$product""")
        cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")

        lot_number = len(cardinal.AD_CFG.sections()) - 1
        ad_lot_offset = lot_number - 4 if lot_number - 4 > 0 else 0
        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.FP_LOTS_LIST}:{fp_lots_offset}"),
                 Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"{CBT.ADD_AD_TO_LOT_MANUALLY}:{fp_lots_offset}"),
                 Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"{CBT.EDIT_AD_LOT}:{lot_number}:{ad_lot_offset}"))

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{m.from_user.username} (id: {m.from_user.id})$RESET –¥–æ–±–∞–≤–∏–ª —Å–µ–∫—Ü–∏—é "
                    f"$YELLOW[{lot}]$RESET –≤ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.")
        bot.send_message(m.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ–∫—Ü–∏—è <code>{utils.escape(lot)}</code> –≤ –∫–æ–Ω—Ñ–∏–≥ "
                                    f"–∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.", parse_mode="HTML", reply_markup=keyboard)

    def open_products_files_list(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """
        offset = int(c.data.split(":")[1])
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.", c.message.chat.id, c.message.id,
                              reply_markup=keyboards.products_files_list(offset))
        bot.answer_callback_query(c.id)

    def act_create_product_file(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.
        """
        result = bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ "
                                                     "(–º–æ–∂–Ω–æ –±–µ–∑ <code>.txt</code>).\n\n",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.CREATE_PRODUCTS_FILE)
        bot.answer_callback_query(c.id)

    def create_products_file(m: types.Message):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.
        """
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        file_name = m.text.strip()
        if not file_name.endswith(".txt"):
            file_name += ".txt"

        if os.path.exists(f"storage/products/{file_name}"):
            file_index = os.listdir("storage/products").index(file_name)
            offset = file_index - 4 if file_index - 4 > 0 else 0
            keyboard = types.InlineKeyboardMarkup()\
                .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.CATEGORY}:autoDelivery"),
                     Button("‚ûï –°–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data=CBT.CREATE_PRODUCTS_FILE),
                     Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_index}:{offset}"))
            bot.reply_to(m, f"‚ùå –§–∞–π–ª <code>storage/products/{utils.escape(file_name)}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)
            return

        try:
            with open(f"storage/products/{file_name}", "w", encoding="utf-8"):
                pass
        except:
            logger.debug(traceback.format_exc())
            keyboard = types.InlineKeyboardMarkup() \
                .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.CATEGORY}:autoDelivery"),
                     Button("‚ûï –°–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data=CBT.CREATE_PRODUCTS_FILE))
            bot.reply_to(m, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ "
                            f"<code>storage/products/{utils.escape(file_name)}</code>. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                            f"<code>logs/log.log</code>.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)

        file_index = os.listdir("storage/products").index(file_name)
        offset = file_index - 4 if file_index - 4 > 0 else 0
        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.CATEGORY}:autoDelivery"),
                 Button("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data=CBT.CREATE_PRODUCTS_FILE),
                 Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_index}:{offset}"))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{m.from_user.username} (id: {m.from_user.id})$RESET —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ "
                    f"$YELLOWstorage/products/{file_name}$RESET.")
        bot.send_message(m.chat.id, f"‚úÖ –§–∞–π–ª <code>storage/products/{utils.escape(file_name)}</code> —Å–æ–∑–¥–∞–Ω.",
                         parse_mode="HTML", reply_markup=keyboard)

    # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–æ–≤.
    def open_edit_lot_cp(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –ª–æ—Ç–∞.
        """
        split = c.data.split(":")
        lot_index, offset = int(split[1]), int(split[2])
        if not check_ad_lot_exists(lot_index, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        lot = cardinal.AD_CFG.sections()[lot_index]
        lot_obj = cardinal.AD_CFG[lot]

        bot.edit_message_text(utils.generate_lot_info_text(lot, lot_obj),
                              c.message.chat.id, c.message.id, parse_mode="HTML",
                              reply_markup=keyboards.edit_lot(cardinal, lot_index, offset))
        bot.answer_callback_query(c.id)

    def act_edit_lot_response(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤—ã–¥–∞—á–∏.
        """
        split = c.data.split(":")
        lot_index, offset = int(split[1]), int(split[2])
        result = bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.EDIT_LOT_DELIVERY_TEXT,
                          {"lot_index": lot_index, "offset": offset})
        bot.answer_callback_query(c.id)

    def edit_lot_response(m: types.Message):
        """
        –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏.
        """
        user_state = tg.get_user_state(m.chat.id, m.from_user.id)
        lot_index, offset = user_state["data"]["lot_index"], user_state["data"]["offset"]
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        if not check_ad_lot_exists(lot_index, m):
            return

        new_response = m.text.strip()
        lot = cardinal.AD_CFG.sections()[lot_index]
        lot_obj = cardinal.AD_CFG[lot]

        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_AD_LOT}:{lot_index}:{offset}"),
                 Button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"{CBT.EDIT_LOT_DELIVERY_TEXT}:{lot_index}:{offset}"))

        if lot_obj.get("productsFileName") is not None and "$product" not in new_response:
            bot.reply_to(m, f"‚ùå –ö –ª–æ—Ç—É <code>[{utils.escape(lot)}]</code> –ø—Ä–∏–≤—è–∑–∞–Ω —Ñ–∞–π–ª —Å "
                            f"—Ç–æ–≤–∞—Ä–∞–º–∏, –æ–¥–Ω–∞–∫–æ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>$product</code>.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)
            return

        cardinal.AD_CFG.set(lot, "response", new_response)
        cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{m.from_user.username} (id: {m.from_user.id})$RESET –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏ "
                    f"–ª–æ—Ç–∞ $YELLOW[{lot}]$RESET –Ω–∞ $YELLOW\"{new_response}\"$RESET.")

        bot.reply_to(m, f"‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è –ª–æ—Ç–∞ <code>{utils.escape(lot)}</code> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "
                        f"<code>{utils.escape(new_response)}</code>",
                     allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)

    def act_link_products_file(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∫ –ª–æ—Ç—É.
        """
        split = c.data.split(":")
        lot_index, offset = int(split[1]), int(split[2])
        result = bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª "
                                                     "—Å —Ç–æ–≤–∞—Ä–∞–º–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code>\n\n"
                                                     "–ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.BIND_PRODUCTS_FILE,
                          {"lot_index": lot_index, "offset": offset})
        bot.answer_callback_query(c.id)

    def link_products_file(m: types.Message):
        """
        –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∫ –ª–æ—Ç—É.
        """
        user_state = tg.get_user_state(m.chat.id, m.from_user.id)
        lot_index, offset = user_state["data"]["lot_index"], user_state["data"]["offset"]
        tg.clear_user_state(m.chat.id, m.from_user.id, True)
        if not check_ad_lot_exists(lot_index, m):
            return

        lot = cardinal.AD_CFG.sections()[lot_index]
        lot_obj = cardinal.AD_CFG[lot]
        file_name = m.text.strip()
        exists = 1

        if "$product" not in lot_obj.get("response") and file_name != "":
            keyboard = types.InlineKeyboardMarkup() \
                .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_AD_LOT}:{lot_index}:{offset}"))
            bot.reply_to(m, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏, —Ç.–∫. –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞ "
                            "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è <code>$product</code>.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)
            return

        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_AD_LOT}:{lot_index}:{offset}"),
                 Button("‚õìÔ∏è –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å", callback_data=f"{CBT.BIND_PRODUCTS_FILE}:{lot_index}:{offset}"))

        if file_name == "-":
            cardinal.AD_CFG.remove_option(lot, "productsFileName")
            cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{m.from_user.username} (id: {m.from_user.id})$RESET –æ—Ç–≤—è–∑–∞–ª —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –æ—Ç "
                f"–ª–æ—Ç–∞ $YELLOW[{lot}]$RESET.")
            bot.reply_to(m, f"‚úÖ –§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ª–æ—Ç–∞ <code>{utils.escape(lot)}</code>.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)
            return

        if not file_name.endswith(".txt"):
            file_name += ".txt"

        if not os.path.exists(f"storage/products/{file_name}"):
            bot.send_message(m.chat.id, f"üîÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ "
                                        f"<code>storage/products/{utils.escape(file_name)} ...</code>",
                             parse_mode="HTML")
            exists = 0
            try:
                with open(f"storage/products/{file_name}", "w", encoding="utf-8"):
                    pass
            except:
                logger.debug(traceback.format_exc())
                bot.reply_to(m, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ "
                                f"<code>storage/products/{utils.escape(file_name)}</code>. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ "
                                f"<code>logs/log.log</code>.",
                             allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)

        cardinal.AD_CFG.set(lot, "productsFileName", file_name)
        cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")

        if exists:
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{m.from_user.username} (id: {m.from_user.id})$RESET –ø—Ä–∏–≤—è–∑–∞–ª —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ "
                f"$YELLOWstorage/products/{file_name}$RESET –∫ –ª–æ—Ç—É $YELLOW[{lot}]$RESET.")
            bot.reply_to(m, f"‚úÖ –§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ <code>storage/products/{utils.escape(file_name)}</code> "
                            f"—É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ª–æ—Ç—É <code>{utils.escape(lot)}</code>.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)
        else:
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{m.from_user.username} (id: {m.from_user.id})$RESET —Å–æ–∑–¥–∞–ª –∏ –ø—Ä–∏–≤—è–∑–∞–ª —Ñ–∞–π–ª —Å "
                f"—Ç–æ–≤–∞—Ä–∞–º–∏ $YELLOWstorage/products/{file_name}$RESET –∫ –ª–æ—Ç—É $YELLOW[{lot}]$RESET.")

            bot.reply_to(m, f"‚úÖ –§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ <code>storage/products/{utils.escape(file_name)}</code> "
                            f"—É—Å–ø–µ—à–Ω–æ <b><u>—Å–æ–∑–¥–∞–Ω</u></b> –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ª–æ—Ç—É <code>{utils.escape(lot)}</code>.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)

    def switch_lot_setting(c: types.CallbackQuery):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ—Ç–∞.
        """
        split = c.data.split(":")
        param, lot_number, offset = split[1], int(split[2]), int(split[3])
        if not check_ad_lot_exists(lot_number, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        lot = cardinal.AD_CFG.sections()[lot_number]
        lot_obj = cardinal.AD_CFG[lot]
        if lot_obj.get(param) in [None, "0"]:
            value = "1"
        else:
            value = "0"
        cardinal.AD_CFG.set(lot, param, value)
        cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{c.from_user.username} (id: {c.from_user.id})$RESET –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä $CYAN{param}$RESET "
            f"—Å–µ–∫—Ü–∏–∏ $YELLOW[{lot}]$RESET –Ω–∞ $YELLOW{value}$RESET.")
        bot.edit_message_text(utils.generate_lot_info_text(lot, lot_obj),
                              c.message.chat.id, c.message.id, parse_mode="HTML",
                              reply_markup=keyboards.edit_lot(cardinal, lot_number, offset))
        bot.answer_callback_query(c.id)

    def create_lot_delivery_test(c: types.CallbackQuery):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é [–∫–ª—é—á: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞] –¥–ª—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.
        """
        split = c.data.split(":")
        lot_index, offset = int(split[1]), int(split[2])

        if not check_ad_lot_exists(lot_index, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        lot_name = cardinal.AD_CFG.sections()[lot_index]

        simbols = string.ascii_letters + "0123456789"
        key = "".join(random.sample(simbols, 50))

        cardinal.delivery_tests[key] = lot_name

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{c.from_user.username} (id: {c.from_user.id})$RESET —Å–æ–∑–¥–∞–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –¥–ª—è "
            f"–∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –ª–æ—Ç–∞ $YELLOW[{lot_name}]$RESET: $CYAN{key}$RESET.")

        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_AD_LOT}:{lot_index}:{offset}"),
                 Button("üëæ –ï—â–µ 1 —Ç–µ—Å—Ç", callback_data=f"test_auto_delivery:{lot_index}:{offset}"))

        bot.send_message(c.message.chat.id, f"‚úÖ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –ª–æ—Ç–∞ "
                                            f"<code>{utils.escape(lot_name)}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. \n\n"
                                            f"–î–ª—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–∏–∑—É –≤ –ª—é–±–æ–π —á–∞—Ç FunPay (–õ–°).\n\n"
                                            f"<code>!–∞–≤—Ç–æ–≤—ã–¥–∞—á–∞ {key}</code>", parse_mode="HTML", reply_markup=keyboard)
        bot.answer_callback_query(c.id)

    def del_lot(c: types.CallbackQuery):
        """
        –£–¥–∞–ª—è–µ—Ç –ª–æ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
        """
        split = c.data.split(":")
        lot_number, offset = int(split[1]), int(split[2])

        if not check_ad_lot_exists(lot_number, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        lot = cardinal.AD_CFG.sections()[lot_number]
        cardinal.AD_CFG.remove_section(lot)
        cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{c.from_user.username} (id: {c.from_user.id})$RESET —É–¥–∞–ª–∏–ª —Å–µ–∫—Ü–∏—é "
            f"$YELLOW[{lot}]$RESET –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.")
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ª–æ—Ç.", c.message.chat.id, c.message.id,
                              reply_markup=keyboards.lots_list(cardinal, offset))
        bot.answer_callback_query(c.id)

    # –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞ —Å FunPay
    def update_funpay_lots_list(c: types.CallbackQuery):
        offset = int(c.data.split(":")[1])
        new_msg = bot.send_message(c.message.chat.id,
                                   "–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)...")
        bot.answer_callback_query(c.id)
        result = cardinal.update_lots_and_categories()
        if not result:
            bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö. "
                                  "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ <code>logs/log.log</code>.", new_msg.chat.id, new_msg.id,
                                  parse_mode="HTML")
            return
        bot.delete_message(new_msg.chat.id, new_msg.id)
        c.data = f"{CBT.FP_LOTS_LIST}:{offset}"
        open_funpay_lots_list(c)

    def add_ad_to_lot(c: types.CallbackQuery):
        split = c.data.split(":")
        fp_lot_index, fp_lots_offset = int(split[1]), int(split[2])

        if fp_lot_index > len(cardinal.telegram_lots) - 1:
            update_button = types.InlineKeyboardMarkup().add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                                                    callback_data=f"{CBT.FP_LOTS_LIST}:0"))
            bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–æ—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{fp_lot_index}</code>.",
                                  c.message.chat.id, c.message.id,
                                  parse_mode="HTML", reply_markup=update_button)
            bot.answer_callback_query(c.id)
            return

        lot = cardinal.telegram_lots[fp_lot_index]
        if lot.title in cardinal.AD_CFG.sections():
            ad_lot_index = cardinal.AD_CFG.sections().index(lot.title)
            ad_lots_offset = ad_lot_index - 4 if ad_lot_index - 4 > 0 else 0

            keyboard = types.InlineKeyboardMarkup() \
                .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.FP_LOTS_LIST}:{fp_lots_offset}"),
                     Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"{CBT.EDIT_AD_LOT}:{ad_lot_index}:{ad_lots_offset}"))

            bot.send_message(c.message.chat.id,
                             f"‚ùå –õ–æ—Ç <code>{utils.escape(lot.title)}</code> —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.",
                             parse_mode="HTML", reply_markup=keyboard)
            bot.answer_callback_query(c.id)
            return

        cardinal.AD_CFG.add_section(lot.title)
        cardinal.AD_CFG.set(lot.title, "response", "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, $username!\n\n–í–æ—Ç —Ç–≤–æ–π —Ç–æ–≤–∞—Ä:\n\n$product")
        cardinal.save_config(cardinal.AD_CFG, "configs/auto_delivery.cfg")

        ad_lot_index = len(cardinal.AD_CFG.sections()) - 1
        ad_lots_offset = ad_lot_index - 4 if ad_lot_index - 4 > 0 else 0
        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.FP_LOTS_LIST}:{fp_lots_offset}"),
                 Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"{CBT.EDIT_AD_LOT}:{ad_lot_index}:{ad_lots_offset}"))

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{c.from_user.username} (id: {c.from_user.id})$RESET –¥–æ–±–∞–≤–∏–ª —Å–µ–∫—Ü–∏—é "
                    f"$YELLOW[{lot.title}]$RESET –≤ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.")

        bot.send_message(c.message.chat.id,
                         f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ–∫—Ü–∏—è <code>{utils.escape(lot.title)}</code> –≤ –∫–æ–Ω—Ñ–∏–≥ "
                         f"–∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.", parse_mode="HTML", reply_markup=keyboard)
        bot.answer_callback_query(c.id)

    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
    def open_products_file_action(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–º —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """
        split = c.data.split(":")
        file_index, offset = int(split[1]), int(split[2])
        files = [i for i in os.listdir("storage/products") if i.endswith(".txt")]
        if not check_products_file_exists(file_index, files, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        file_name = files[file_index]
        products_amount = cardinal_tools.count_products(f"storage/products/{file_name}")
        nl = "\n"
        delivery_objs = [i for i in cardinal.AD_CFG.sections() if
                         cardinal.AD_CFG[i].get("productsFileName") == file_name]

        text = f"""<b><u>{file_name}</u></b>
        
<b><i>–¢–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ:</i></b>  <code>{products_amount}</code>

<b><i>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ—Ç–∞—Ö:</i></b>
{nl.join(f"<code>{utils.escape(i)}</code>" for i in delivery_objs)}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</i>  <code>{datetime.datetime.now().strftime('%H:%M:%S')}</code>"""
        bot.edit_message_text(text, c.message.chat.id, c.message.id,
                              reply_markup=keyboards.products_file_edit(file_index, offset),
                              parse_mode="HTML")
        bot.answer_callback_query(c.id)

    def act_add_products_to_file(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """
        split = c.data.split(":")
        file_index, el_index, offset, prev_page = int(split[1]), int(split[2]), int(split[3]), int(split[4])
        result = bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ "
                                  "–¥–æ–±–∞–≤–∏—Ç—å. –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
                                  parse_mode="HTML", reply_markup=keyboards.CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.ADD_PRODUCTS_TO_FILE,
                          {"file_index": file_index, "element_index": el_index,
                           "offset": offset, "previous_page": prev_page})
        bot.answer_callback_query(c.id)

    def add_products_to_file(m: types.Message):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """
        state = tg.get_user_state(m.chat.id, m.from_user.id)["data"]
        file_index, el_index, offset, prev_page = (state["file_index"], state["element_index"],
                                                   state["offset"], state["previous_page"])
        tg.clear_user_state(m.chat.id, m.from_user.id, True)

        files = [i for i in os.listdir("storage/products") if i.endswith(".txt")]
        if file_index > len(files) - 1:

            if prev_page == 0:
                update_btn = Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{CBT.PRODUCTS_FILES_LIST}:0")
            else:
                update_btn = Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_AD_LOT}:{el_index}:{offset}")
            error_keyboard = types.InlineKeyboardMarkup().add(update_btn)

            bot.reply_to(m, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{file_index}</code>.",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=error_keyboard)
            return

        file_name = files[file_index]
        products = list(itertools.filterfalse(lambda el: not el, m.text.strip().split("\n")))

        if prev_page == 0:
            back_btn = Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_index}:{offset}")
        else:
            back_btn = Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_AD_LOT}:{el_index}:{offset}")

        try_again_btn = Button("‚ûï –ï—â–µ —Ä–∞–∑",
                               callback_data=f"{CBT.ADD_PRODUCTS_TO_FILE}:{file_index}:{el_index}:{offset}:{prev_page}")

        add_more_btn = Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ",
                              callback_data=f"{CBT.ADD_PRODUCTS_TO_FILE}:{file_index}:{el_index}:{offset}:{prev_page}")

        products_text = "\n".join(products)

        try:
            with open(f"storage/products/{file_name}", "a", encoding="utf-8") as f:
                f.write("\n")
                f.write(products_text)
        except:
            logger.debug(traceback.format_exc())
            keyboard = types.InlineKeyboardMarkup().row(back_btn, try_again_btn)
            bot.reply_to(m, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∞–π–ª. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ <code>logs/log.log</code>",
                         allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{m.from_user.username} (id: {m.from_user.id})$RESET –¥–æ–±–∞–≤–∏–ª "
                    f"$CYAN{len(products)}$RESET —Ç–æ–≤–∞—Ä(-a, -o–≤) –≤ —Ñ–∞–π–ª $YELLOWstorage/products/{file_name}$RESET.")

        keyboard = types.InlineKeyboardMarkup().row(back_btn, add_more_btn)

        bot.reply_to(m, f"‚úÖ –í —Ñ–∞–π–ª <code>storage/products/{file_name}</code> –¥–æ–±–∞–≤–ª–µ–Ω(-–æ) "
                        f"<code>{len(products)}</code> —Ç–æ–≤–∞—Ä(-–∞ / -–æ–≤).",
                     allow_sending_without_reply=True, parse_mode="HTML", reply_markup=keyboard)

    def send_products_file(c: types.CallbackQuery):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """
        split = c.data.split(":")
        file_index, offset = int(split[1]), int(split[2])
        files = [i for i in os.listdir("storage/products") if i.endswith(".txt")]
        if not check_products_file_exists(file_index, files, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        file_name = files[file_index]
        back_button = types.InlineKeyboardMarkup() \
            .add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                            callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_index}:{offset}"))

        with open(f"storage/products/{file_name}", "r", encoding="utf-8") as f:
            data = f.read().strip()
            if not data:
                bot.send_message(c.message.chat.id, f"‚ùå –§–∞–π–ª <code>storage/products/{file_name}</code> –ø—É—Å—Ç.",
                                 parse_mode="HTML", reply_markup=back_button)
                bot.answer_callback_query(c.id)
                return

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{c.from_user.username} (id: {c.from_user.id})$RESET –∑–∞–ø—Ä–æ—Å–∏–ª "
                        f"—Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ $YELLOWstorage/products/{file_name}$RESET.")
            f.seek(0)
            bot.send_document(c.message.chat.id, f)
            bot.answer_callback_query(c.id)

    def ask_del_products_file(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—É–±-–ø–∞–Ω–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """
        split = c.data.split(":")
        file_index, offset = int(split[1]), int(split[2])
        files = [i for i in os.listdir("storage/products") if i.endswith(".txt")]
        if not check_products_file_exists(file_index, files, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return
        bot.edit_message_reply_markup(c.message.chat.id, c.message.id,
                                      reply_markup=keyboards.products_file_edit(file_index, offset, True))
        bot.answer_callback_query(c.id)

    def del_products_file(c: types.CallbackQuery):
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """

        split = c.data.split(":")
        file_index, offset = int(split[1]), int(split[2])
        files = [i for i in os.listdir("storage/products") if i.endswith(".txt")]
        if not check_products_file_exists(file_index, files, c.message, reply_mode=False):
            tg.answer_callback_query(c.id)
            return

        file_name = files[file_index]

        delivery_objs = [i for i in cardinal.AD_CFG.sections() if
                         cardinal.AD_CFG[i].get("productsFileName") == file_name]
        if delivery_objs:
            keyboard = types.InlineKeyboardMarkup()\
                .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_index}:{offset}"))
            bot.edit_message_text(f"‚ùå –§–∞–π–ª <code>storage/products/{file_name}</code> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ "
                                  f"–∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.\n –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–æ—Ç "
                                  f"—Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.",
                                  c.message.chat.id, c.message.id,
                                  parse_mode="HTML", reply_markup=keyboard)
            bot.answer_callback_query(c.id)
            return

        try:
            os.remove(f"storage/products/{file_name}")

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA{c.from_user.username} (id: {c.from_user.id})$RESET —É–¥–∞–ª–∏–ª "
                        f"—Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ $YELLOWstorage/products/{file_name}$RESET.")

            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.",
                                  c.message.chat.id, c.message.id,
                                  reply_markup=keyboards.products_files_list(offset))

            bot.answer_callback_query(c.id)
        except:
            keyboard = types.InlineKeyboardMarkup() \
                .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_index}:{offset}"))
            bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª <code>storage/products/{file_name}</code>. "
                                  f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ logs/log.log.",
                                  c.message.chat.id, c.message.id,
                                  parse_mode="HTML", reply_markup=keyboard)
            bot.answer_callback_query(c.id)
            logger.debug(traceback.format_exc())
            return

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.
    tg.cbq_handler(open_lots_list, lambda c: c.data.startswith(f"{CBT.AD_LOTS_LIST}:"))
    tg.cbq_handler(open_funpay_lots_list, lambda c: c.data.startswith(f"{CBT.FP_LOTS_LIST}:"))
    tg.cbq_handler(act_add_lot, lambda c: c.data.startswith(f"{CBT.ADD_AD_TO_LOT_MANUALLY}:"))
    tg.msg_handler(add_lot, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT.ADD_AD_TO_LOT_MANUALLY))

    tg.cbq_handler(open_products_files_list, lambda c: c.data.startswith(f"{CBT.PRODUCTS_FILES_LIST}:"))

    tg.cbq_handler(act_create_product_file, lambda c: c.data == CBT.CREATE_PRODUCTS_FILE)
    tg.msg_handler(create_products_file, func=lambda m: tg.check_state(m.chat.id, m.from_user.id,
                                                                       CBT.CREATE_PRODUCTS_FILE))

    # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–æ–≤.
    tg.cbq_handler(open_edit_lot_cp, lambda c: c.data.startswith(f"{CBT.EDIT_AD_LOT}:"))

    tg.cbq_handler(act_edit_lot_response, lambda c: c.data.startswith(f"{CBT.EDIT_LOT_DELIVERY_TEXT}:"))
    tg.msg_handler(edit_lot_response,
                   func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT.EDIT_LOT_DELIVERY_TEXT))

    tg.cbq_handler(act_link_products_file, lambda c: c.data.startswith(f"{CBT.BIND_PRODUCTS_FILE}:"))
    tg.msg_handler(link_products_file, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT.BIND_PRODUCTS_FILE))

    tg.cbq_handler(switch_lot_setting, lambda c: c.data.startswith("switch_lot:"))
    tg.cbq_handler(create_lot_delivery_test, lambda c: c.data.startswith("test_auto_delivery:"))
    tg.cbq_handler(del_lot, lambda c: c.data.startswith(f"{CBT.DEL_AD_LOT}:"))

    # –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞ —Å FunPay
    tg.cbq_handler(add_ad_to_lot, lambda c: c.data.startswith(f"{CBT.ADD_AD_TO_LOT}:"))
    tg.cbq_handler(update_funpay_lots_list, lambda c: c.data.startswith("update_funpay_lots:"))

    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
    tg.cbq_handler(open_products_file_action, lambda c: c.data.startswith(f"{CBT.EDIT_PRODUCTS_FILE}:"))

    tg.cbq_handler(act_add_products_to_file, lambda c: c.data.startswith(f"{CBT.ADD_PRODUCTS_TO_FILE}:"))
    tg.msg_handler(add_products_to_file,
                   func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT.ADD_PRODUCTS_TO_FILE))

    tg.cbq_handler(send_products_file, lambda c: c.data.startswith("download_products_file:"))
    tg.cbq_handler(ask_del_products_file, lambda c: c.data.startswith("del_products_file:"))
    tg.cbq_handler(del_products_file, lambda c: c.data.startswith("confirm_del_products_file:"))


BIND_TO_PRE_INIT = [init_auto_delivery_cp]
