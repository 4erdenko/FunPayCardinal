"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram –±–æ—Ç.
"""

import configparser
import datetime
import os.path
import json

import Utils.cardinal_tools

ABOUT_TEXT = """FunPay Cardinal - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:
    TG: @woopertail
    VK: https://vk.com/woopertail
    GitHub: https://github.com/woopertail

–°–∫–∞—á–∞—Ç—å –±–æ—Ç–∞:
https://github.com/woopertail/FunPayCardinal"""


def load_authorized_users() -> list[int]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞.

    :return: —Å–ø–∏—Å–æ–∫ –∏–∑ id –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not os.path.exists("storage/cache/tg_authorized_users.json"):
        return []
    with open("storage/cache/tg_authorized_users.json", "r", encoding="utf-8") as f:
        data = f.read()
    return json.loads(data)


def load_chat_ids() -> list[int]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞.

    :return: —Å–ø–∏—Å–æ–∫ –∏–∑ id —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    if not os.path.exists("storage/cache/tg_chat_ids.json"):
        return []
    with open("storage/cache/tg_chat_ids.json", "r", encoding="utf-8") as f:
        data = f.read()
    return json.loads(data)


def save_authorized_users(users: list[int]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à.

    :param users: —Å–ø–∏—Å–æ–∫ id –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not os.path.exists("storage/cache/"):
        os.makedirs("storage/cache/")

    with open("storage/cache/tg_authorized_users.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(users))


def save_chat_ids(chat_ids: list[int]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç id —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫—ç—à.

    :param chat_ids: —Å–ø–∏—Å–æ–∫ id —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    if not os.path.exists("storage/cache/"):
        os.makedirs("storage/cache/")

    with open("storage/cache/tg_chat_ids.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(chat_ids))


def escape(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ HTML —Ä–∞–∑–º–µ—Ç–∫—É.

    :param text: —Ç–µ–∫—Å—Ç.
    :return: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    escape_characters = {
        "<": "&lt;",
        ">": "&gt;",
        "&": "&amp;"
    }
    for char in escape_characters:
        text = text.replace(char, escape_characters[char])
    return text


def bool_to_text(value: bool | int | str | None, on: str = "üü¢", off: str = "üî¥"):
    if value is not None and int(value):
        return on
    return off


def generate_help_text(commands_json: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏.

    :return: —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏.
    """
    text = ""
    for module in commands_json:
        if not len(commands_json[module]):
            continue

        text += f"\n{module}\n"
        for command in commands_json[module]:
            text += f"    /{command} - {commands_json[module][command]}\n"
    return text.strip()


def get_offset(element_index: int, max_elements_on_page: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º element_index –æ–∫–∞–∑–∞–ª—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞.
    """
    elements_amount = element_index + 1
    elements_on_page = elements_amount % max_elements_on_page
    elements_on_page = elements_on_page if elements_on_page else max_elements_on_page
    if not elements_amount - elements_on_page:  # –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥:
        return 0
    else:
        return element_index - elements_on_page + 1


def generate_lot_info_text(lot_name: str, lot_obj: configparser.SectionProxy) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ—Ç–µ.

    :param lot_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.

    :param lot_obj: —Å–µ–∫—Ü–∏—è –ª–æ—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.

    :return: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ—Ç–µ.
    """
    if lot_obj.get("productsFileName") is None:
        file_path = "<b><u>–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.</u></b>"
        products_amount = "<code>‚àû</code>"
    else:
        file_path = f"<code>storage/products/{lot_obj.get('productsFileName')}</code>"
        if not os.path.exists(f"storage/products/{lot_obj.get('productsFileName')}"):
            with open(f"storage/products/{lot_obj.get('productsFileName')}", "w", encoding="utf-8"):
                pass
        products_amount = Utils.cardinal_tools.count_products(f"storage/products/{lot_obj.get('productsFileName')}")
        products_amount = f"<code>{products_amount}</code>"

    message = f"""<b>[{escape(lot_name)}]</b>\n
<b><i>–¢–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏:</i></b> <code>{escape(lot_obj["response"])}</code>\n
<b><i>–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: </i></b> {products_amount}\n
<b><i>–§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏: </i></b>{file_path}\n
<b><i>–í—ã–¥–∞—á–∞ –ø—Ä–∏–Ω—É–¥. –æ—Ç–∫–ª—é—á–µ–Ω–∞: </i></b> {bool_to_text(lot_obj.get("disable"), "<b><u>–î–∞.</u></b>", "<b><u>–ù–µ—Ç.</u></b>")}

<b><i>–ú—É–ª—å—Ç–∏-–≤—ã–¥–∞—á–∞ –ø—Ä–∏–Ω—É–¥. –æ—Ç–∫–ª—é—á–µ–Ω–∞: </i></b> {bool_to_text(lot_obj.get("disableMultiDelivery"), "<b><u>–î–∞.</u></b>", "<b><u>–ù–µ—Ç.</u></b>")}

<b><i>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥. –æ—Ç–∫–ª—é—á–µ–Ω–æ: </i></b> {bool_to_text(lot_obj.get("disableAutoRestore"), 
                                                            "<b><u>–î–∞.</u></b>", "<b><u>–ù–µ—Ç.</u></b>")}\n
<b><i>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏–Ω—É–¥. –æ—Ç–∫–ª—é—á–µ–Ω–∞: </i></b> {bool_to_text(lot_obj.get("disableAutoDisable"), 
                                                            "<b><u>–î–∞.</u></b>", "<b><u>–ù–µ—Ç.</u></b>")}\n
<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</i>  <code>{datetime.datetime.now().strftime('%H:%M:%S')}</code>"""
    return message
