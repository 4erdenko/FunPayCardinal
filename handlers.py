"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–≤–µ–Ω—Ç–æ–≤.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

from FunPayAPI.types import NewMessageEvent, NewOrderEvent, RaiseResponse, Message, Order
import FunPayAPI.users

from Utils import cardinal_tools
import configparser
import time
import logging
import traceback
from threading import Thread

import telebot.types
from telebot.types import InlineKeyboardButton as Button
from telegram import telegram_tools as tg_tools


logger = logging.getLogger("FPC.handlers")


ORDER_HTML_TEMPLATE = """<a href="https://funpay.com/orders/DELIVERY_TEST/" class="tc-item info">
    <div class="tc-date">
        <div class="tc-date-time">—Å–µ–≥–æ–¥–Ω—è, 00:00</div>
        <div class="tc-date-left">1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥</div>
    </div>

    <div class="tc-order">#DELIVERY_TEST</div>
    <div class="order-desc">
        <div>–¢–ï–°–¢ –ê–í–¢–û–í–´–î–ê–ß–ò</div>
        <div class="text-muted">$lot_name</div>
    </div>

    <div class="tc-user">
        <div class="media media-user mt0 offline">
        <div class="media-left">
            <div class="avatar-photo pseudo-a" tabindex="0" data-href="https://funpay.com/users/000000/" style="background-image: url(https://s.funpay.com/s/avatar/6d/h3/6dh3m89zv8k90kwlj9bg.jpg);"></div>
        </div>
        <div class="media-body">
            <div class="media-user-name">
                <span class="pseudo-a" tabindex="0" data-href="https://funpay.com/users/000000/">$username</span>
            </div>
            <div class="media-user-status">–±—ã–ª –º–∏–ª–ª–∏–æ–Ω –ª–µ—Ç –Ω–∞–∑–∞–¥</div>
        </div>
    </div>
        <div class="tc-status text-primary">–û–ø–ª–∞—á–µ–Ω</div>
        <div class="tc-price text-nowrap tc-seller-sum">999999.0<span class="unit">‚ÇΩ</span></div>
</a>"""


def create_reply_button(node_id: int) -> telebot.types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é FunPay.
    :param node_id: ID –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–Ω–æ–ø–∫–∏ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã).
    """
    keyboard = telebot.types.InlineKeyboardMarkup()
    reply_button = telebot.types.InlineKeyboardButton(text="üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"to_node:{node_id}")
    keyboard.add(reply_button)
    return keyboard


def create_new_order_keyboard(order_id: str) -> telebot.types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ä–µ–¥–µ—Ä–µ.
    :param order_id: ID –æ—Ä–µ–¥—Ä–∞.
    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–Ω–æ–ø–∫–∏ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã).
    """
    keyboard = telebot.types.InlineKeyboardMarkup()\
        .add(Button(text="üí∏ –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏", callback_data=f"refund_request:{order_id[1:]}")) \
        .add(Button(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞", url=f"https://funpay.com/orders/{order_id[1:]}/"))
    return keyboard


# –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (REGISTER_TO_NEW_MESSAGE)
def log_msg_handler(cardinal: Cardinal, event: NewMessageEvent) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.info(f"$MAGENTA‚îå‚îÄ‚îÄ$RESET –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º $YELLOW{event.message.chat_with}"
                f" (node: {event.message.node_id}):")

    for index, line in enumerate(event.message.text.split("\n")):
        if not index:
            logger.info(f"$MAGENTA‚îî‚îÄ‚îÄ‚îÄ> $CYAN{line}")
        else:
            logger.info(f"      $CYAN{line}")


def send_response_handler(cardinal: Cardinal, event: NewMessageEvent) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π, –∏ –µ—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.
    """
    if event.message.chat_with in cardinal.block_list and int(cardinal.MAIN_CFG["BlockList"]["blockResponse"]):
        return

    command = event.message.text.strip().lower()
    if not int(cardinal.MAIN_CFG["FunPay"]["autoResponse"]):
        return
    if command not in cardinal.AR_CFG:
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ $YELLOW{command}$RESET "
                f"–≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º $YELLOW{event.message.chat_with} (node: {event.message.node_id}).")
    attempts = 3
    response_text = cardinal_tools.format_msg_text(cardinal.AR_CFG[command]["response"], event.message)
    new_msg_obj = FunPayAPI.types.Message(response_text, event.message.node_id, event.message.chat_with)
    while attempts:
        try:
            result = cardinal.send_message(new_msg_obj)
        except:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {event.message.chat_with}.")
            logger.debug(traceback.format_exc())
            logger.info("–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É.")
            attempts -= 1
            time.sleep(1)
            continue
        if not result:
            attempts -= 1
            logger.info("–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É.")
            time.sleep(1)
            continue
        return
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
    return


def send_new_message_notification_handler(cardinal: Cardinal, event: NewMessageEvent) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    if event.message.chat_with in cardinal.block_list and int(cardinal.MAIN_CFG["BlockList"]["blockNewMessageNotification"]):
        return
    if cardinal.telegram is None or not int(cardinal.MAIN_CFG["Telegram"]["newMessageNotification"]):
        return
    if event.message.text.strip().lower() in cardinal.AR_CFG.sections():
        return

    if event.message.text.startswith("!–∞–≤—Ç–æ–≤—ã–¥–∞—á–∞"):
        return

    if any(i in event.message.text for i in ["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ü—Ä–æ–¥–∞–≤–µ—Ü"]):
        if any(i in event.message.text for i in ["–≤–µ—Ä–Ω—É–ª –¥–µ–Ω—å–≥–∏", "–æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑", "–Ω–∞–ø–∏—Å–∞–ª –æ—Ç–∑—ã–≤",
                                                 "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"]):
            return
    text = f"""–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <a href="https://funpay.com/chat/?node={event.message.node_id}">{event.message.chat_with}</a>.

{tg_tools.format_text(event.message.text)}"""

    button = create_reply_button(event.message.node_id)
    Thread(target=cardinal.telegram.send_notification, args=(text, button), daemon=True).start()


def send_command_notification_handler(cardinal: Cardinal, event: NewMessageEvent) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–º–∞–Ω–¥–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    if event.message.chat_with in cardinal.block_list and int(cardinal.MAIN_CFG["BlockList"]["blockCommandNotification"]):
        return
    command = event.message.text.strip().lower()
    if cardinal.telegram is None or command not in cardinal.AR_CFG:
        return

    if cardinal.AR_CFG[command].get("telegramNotification") is None:
        return
    if not int(cardinal.AR_CFG[command]["telegramNotification"]):
        return

    if cardinal.AR_CFG[command].get("notificationText") is None:
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.message.chat_with} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É \"{tg_tools.format_text(command)}\"."
    else:
        text = cardinal_tools.format_msg_text(cardinal.AR_CFG[command]["notificationText"], event.message)

    Thread(target=cardinal.telegram.send_notification, args=(text, ), daemon=True).start()


def test_auto_delivery_handler(cardinal: Cardinal, event: NewMessageEvent) -> None:
    if not event.message.text.startswith("!–∞–≤—Ç–æ–≤—ã–¥–∞—á–∞"):
        return
    split = event.message.text.split(" ")
    if len(split) < 2:
        logger.warning("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥.")
        return

    key = event.message.text.split(" ")[1].strip()
    if not key.isnumeric() or int(key) != cardinal.secret_key:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥.")
        return

    cardinal.update_secret_key()
    logger.warning("–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω.")

    split = event.message.text.split(" ", 2)
    if len(split) < 3 or not split[2].strip():
        logger.warning("–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return

    lot_name = split[2].strip()

    fake_order = Order(ORDER_HTML_TEMPLATE.replace("$username", event.message.chat_with).replace("$lot_name", lot_name),
                       "#DELIVERY_TEST", lot_name, 999999.0, event.message.chat_with, 000000,
                       FunPayAPI.types.OrderStatuses.OUTSTANDING)

    fake_event = NewOrderEvent(fake_order, event.tag)
    cardinal.run_handlers(cardinal.new_order_handlers, (cardinal, fake_event,))


def send_categories_raised_notification_handler(cardinal: Cardinal, game_id: int, response: RaiseResponse) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–Ω—è—Ç–∏–∏ –ª–æ—Ç–æ–≤ –≤ Telegram.
    """
    if cardinal.telegram is None or not int(cardinal.MAIN_CFG["Telegram"]["lotsRaiseNotification"]):
        return

    cats_text = "".join(f"\"{i}\", " for i in response.raised_category_names).strip()[:-1]
    Thread(target=cardinal.telegram.send_notification,
           args=(f"–ü–æ–¥–Ω—è–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats_text}. (ID –∏–≥—Ä—ã: {game_id})\n"
                 f"–û—Ç–≤–µ—Ç FunPay: {response.funpay_response}"
                 f"–ü–æ–ø—Ä–æ–±—É—é –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {cardinal_tools.time_to_str(response.wait)}.", ), daemon=True).start()


# –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä (REGISTER_TO_NEW_ORDER)
def send_new_order_notification_handler(cardinal: Cardinal, event: NewOrderEvent, *args):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    if event.order.buyer_username in cardinal.block_list and int(cardinal.MAIN_CFG["BlockList"]["blockNewOrderNotification"]):
        return
    if cardinal.telegram is None:
        return
    if not int(cardinal.MAIN_CFG["Telegram"]["newOrderNotification"]):
        return

    node_id = cardinal.account.get_node_id_by_username(event.order.buyer_username)

    text = f"""<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>  <code>{event.order.id}</code>

<b><i>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</i></b>  <code>{event.order.buyer_username}</code>
<b><i>–°—É–º–º–∞:</i></b>  <code>{event.order.price}</code>
<b><i>–õ–æ—Ç:</i></b>  <code>{tg_tools.format_text(event.order.title)}</code>"""

    keyboard = create_new_order_keyboard(event.order.id)
    Thread(target=cardinal.telegram.send_notification, args=(text, keyboard), daemon=True).start()


def send_product_text(node_id: int, text: str, order_id: str, cardinal: Cardinal, *args) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º –≤ —á–∞—Ç node_id.

    :param node_id: ID —á–∞—Ç–∞.
    :param text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param order_id: ID –æ—Ä–¥–µ—Ä–∞.
    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –ö–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    new_msg_obj = Message(text, node_id, None)
    attempts = 3
    while attempts:
        try:
            result = cardinal.send_message(new_msg_obj)
        except:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order_id}. "
                         f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ñ–∞–π–ª–µ logs/log.log.")
            logger.debug(traceback.format_exc())
            logger.info("–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É.")
            attempts -= 1
            time.sleep(1)
            continue
        if not result:
            attempts -= 1
            logger.info("–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É.")
            time.sleep(1)
            continue
        return True
    return False


def deliver_product(cardinal: Cardinal, event: NewOrderEvent, delivery_obj: configparser.SectionProxy,
                    *args) -> tuple[bool, str, int] | None:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
    :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. None - –µ—Å–ª–∏ –ª–æ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
    [–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞] - –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ.
    """
    node_id = cardinal.account.get_node_id_by_username(event.order.buyer_username)
    response_text = cardinal_tools.format_order_text(delivery_obj["response"], event.order)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ª–æ—Ç–∞ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º response –ª–æ—Ç–∞.
    if delivery_obj.get("productsFileName") is None:
        result = send_product_text(node_id, response_text, event.order.id, cardinal)
        return result, response_text, -1

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä.
    file_name = delivery_obj.get("productsFileName")
    product = cardinal_tools.get_product(f"storage/products/{file_name}")
    product_text = product[0].replace("\\n", "\n")
    response_text = response_text.replace("$product", product_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä.
    result = send_product_text(node_id, response_text, event.order.id, cardinal)

    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-–ª–∏–±–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
    if not result:
        cardinal_tools.add_products(f"storage/products/{file_name}", [product_text])
    return result, response_text, -1


def deliver_product_handler(cardinal: Cardinal, event: NewOrderEvent, *args) -> None:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è deliver_product(), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫–∏.
    """
    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
    delivery_obj = None
    config_lot_name = ""
    for lot_name in cardinal.AD_CFG:
        if lot_name in event.order.title:
            delivery_obj = cardinal.AD_CFG[lot_name]
            config_lot_name = lot_name
            break
    if delivery_obj is None:
        return None

    if delivery_obj.get("disable") is not None and delivery_obj.getboolean("disable"):
        return

    cardinal.run_handlers(cardinal.pre_delivery_handlers, (cardinal, event, config_lot_name))
    try:
        result = deliver_product(cardinal, event, delivery_obj, *args)
        if result is None:
            logger.info(f"–õ–æ—Ç \"{event.order.title}\" –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏.")
        elif not result[0]:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {event.order.id}: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
            cardinal.run_handlers(cardinal.post_delivery_handlers,
                                  (cardinal, event, config_lot_name, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫.", True))
        else:
            logger.info(f"–¢–æ–≤–∞—Ä –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {event.order.id} –≤—ã–¥–∞–Ω.")
            cardinal.run_handlers(cardinal.post_delivery_handlers,
                                  (cardinal, event, config_lot_name, result[1], False))
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {event.order.id}.")
        logger.debug(traceback.format_exc())
        cardinal.run_handlers(cardinal.post_delivery_handlers,
                              (cardinal, event, config_lot_name, str(e), True))


# REGISTER_TO_POST_DELIVERY
def send_delivery_notification_handler(cardinal: Cardinal, event: NewOrderEvent, config_lot_name: str,
                                       delivery_text: str, errored: bool = False, *args):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞.
    """
    if cardinal.telegram is None:
        return
    if not int(cardinal.MAIN_CFG["Telegram"]["productsDeliveryNotification"]):
        return

    if errored:
        text = f"""–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ <code>{event.order.id}</code>.
–û—à–∏–±–∫–∞: {delivery_text}"""
    else:
        text = f"""–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ä–¥–µ—Ä–∞ <code>{event.order.id}</code>.

----- –¢–û–í–ê–† -----
{tg_tools.format_text(delivery_text)}"""

    Thread(target=cardinal.telegram.send_notification, args=(text, ), daemon=True).start()


def change_lot_state_handler(cardinal: Cardinal, event: NewOrderEvent, config_lot_name: str,
                             delivery_text: str, errored: bool = False, *args):
    delivery_obj = cardinal.AD_CFG[config_lot_name]
    if delivery_obj.get("productsFileName"):
        # –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞
        file_name = delivery_obj.get("productsFileName")
        products_count = cardinal_tools.get_products_count(f"storage/products/{file_name}")
        if products_count:
            if int(cardinal.MAIN_CFG["FunPay"]["autoRestore"]):
                # restore
                pass
                return
            return
        else:
            if int(cardinal.MAIN_CFG["FunPay"]["autoDisable"]):
                # disable
                pass
                return
            return
    else:
        if int(cardinal.MAIN_CFG["FunPay"]["autoRestore"]):
            if cardinal.AD_CFG[config_lot_name].get("disableAutoRestore") is not None and int(cardinal.AD_CFG[config_lot_name].get("disableAutoRestore")):
                return
            else:
                # todo
                return


'''def activate_lots_handler(cardinal: Cardinal, event: NewOrderEvent, delivery_obj: configparser.SectionProxy):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ—Ç—ã.
    """
    logger.info("–û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–∞—Ö...")
    attempts = 3
    lots_info = []
    while attempts:
        try:
            lots_info = FunPayAPI.users.get_user_lots_info(cardinal.account.id)["lots"]
            break
        except:
            logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–∞—Ö.")
            logger.debug(traceback.format_exc())
            attempts -= 1
    if not attempts:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–∞—Ö: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
        return

    lots_ids = [i.id for i in lots_info]
    for lot in cardinal.lots:
        if lot.id not in lots_ids:
            try:
                cardinal.account.change_lot_state(lot.id, lot.game_id)
                logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–æ—Ç {lot.id}.")
            except:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç {lot.id}.")
                logger.debug(traceback.format_exc())'''


# REGISTER_TO_POST_START
def send_bot_started_notification_handler(cardinal: Cardinal, *args) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    if cardinal.telegram is None:
        return

    if cardinal.account.currency is None:
        curr = ""
    else:
        curr = cardinal.account.currency
    text = f"""<b><u>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</u></b>

<b><i>–ê–∫–∫–∞—É–Ω—Ç:</i></b>  <code>{cardinal.account.username}</code> | <code>{cardinal.account.id}</code>
<b><i>–ë–∞–ª–∞–Ω—Å:</i></b> <code>{cardinal.account.balance}{curr}</code>
<b><i>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:</i></b>  <code>{cardinal.account.active_orders}</code>"""
    cardinal.telegram.send_notification(text)


REGISTER_TO_NEW_MESSAGE = [log_msg_handler,
                           send_response_handler,
                           send_new_message_notification_handler,
                           send_command_notification_handler,
                           test_auto_delivery_handler]

REGISTER_TO_POST_LOTS_RAISE = [send_categories_raised_notification_handler]

REGISTER_TO_NEW_ORDER = [send_new_order_notification_handler, deliver_product_handler]

REGISTER_TO_POST_DELIVERY = [send_delivery_notification_handler]

REGISTER_TO_POST_START = [send_bot_started_notification_handler]

